
######################
# Program ~nestedScoping.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative or zero array size allocation. Program will no exit. "
null_reference: "Null reference. Program will no exit. "
illegal_arr_loc: "Illegal array location. Program will no exit. "
dev_by_zero: "Devision by zero. Program will no exit. "
str0: "mistake"
str1: ""
######################

######################
# DISPATCH VECTORS
_DV_B: [_B_foo]
_DV_A: [_A_f,_A_g,_A_sign,_A_func1]
######################

_B_foo:   # Method foo:
# Line 6: 
Move this, R1
Move 1, R2
# TMP 1
# new smartMove on: R2, R1.1
MoveField R1.1,R3 # SMART MOVED BITCH - field style
Move R2, R3 # brought to you by safe/smartmove
MoveField R3,R1.1 # reversed
# Line 7: 
Move this, R1
Move 2, R2
# TMP 1
# new smartMove on: R2, R1.2
MoveField R1.2,R3 # SMART MOVED BITCH - field style
Move R2, R3 # brought to you by safe/smartmove
MoveField R3,R1.2 # reversed
# Line 8: 
Move this, R1
# new smartMove on: this, R2
Move this, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, this # reversed
Compare 0,R2
JumpTrue _null_reference
# new smartMove on: R2.1, R4
MoveField R2.1,R5 # SMART MOVED BITCH - field style
Move R5, R4 # brought to you by safe/smartmove
MoveField R5,R2.1 # reversed
# new smartMove on: this, R6
Move this, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Move R7, this # reversed
Compare 0,R6
JumpTrue _null_reference
# new smartMove on: R6.2, R8
MoveField R6.2,R9 # SMART MOVED BITCH - field style
Move R9, R8 # brought to you by safe/smartmove
MoveField R9,R6.2 # reversed
# new smartMove on: R4, R10
Move R4, R10 # brought to you by safe/smartmove
# new smartMove on: R8, R11
Move R8, R11 # brought to you by safe/smartmove
# new smartMove on: 0, R12
Move 0, R13 # brought to you by safe/smartmove
Move R13, R12 # brought to you by safe/smartmove
Compare R11,R10
JumpL _l1
# new smartMove on: 1, R12
Move 1, R14 # brought to you by safe/smartmove
Move R14, R12 # brought to you by safe/smartmove
_l1:
# TMP 1
# new smartMove on: R12, R1.3
MoveField R1.3,R15 # SMART MOVED BITCH - field style
Move R12, R15 # brought to you by safe/smartmove
MoveField R15,R1.3 # reversed
Return 9999
_A_f:   # Method f:
# Line 15: 
# new smartMove on: i, R1
Move i, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i # reversed
# new smartMove on: j, R3
Move j, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, j # reversed
# new smartMove on: R1, R5
Move R1, R5 # brought to you by safe/smartmove
# new smartMove on: R3, R6
Move R3, R6 # brought to you by safe/smartmove
Add R6,R5
# new smartMove on: i, R7
Move i, R8 # brought to you by safe/smartmove
Move R8, R7 # brought to you by safe/smartmove
Move R8, i # reversed
# new smartMove on: j, R9
Move j, R10 # brought to you by safe/smartmove
Move R10, R9 # brought to you by safe/smartmove
Move R10, j # reversed
# new smartMove on: R7, R11
Move R7, R11 # brought to you by safe/smartmove
# new smartMove on: R9, R12
Move R9, R12 # brought to you by safe/smartmove
Sub R12,R11
# new smartMove on: R5, R13
Move R5, R13 # brought to you by safe/smartmove
# new smartMove on: R11, R14
Move R11, R14 # brought to you by safe/smartmove
Mul R14,R13
# new smartMove on: R13, R15
Move R13, R15 # brought to you by safe/smartmove
Return R15
# Method f end
Return 9999
_A_g:   # Method g:
# Line 19: 
# new smartMove on: k1, R1
Move k1, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, k1 # reversed
Move 2, R3
# new smartMove on: k2, R4
Move k2, R5 # brought to you by safe/smartmove
Move R5, R4 # brought to you by safe/smartmove
Move R5, k2 # reversed
Move 13, R6
# new smartMove on: R4, R7
Move R4, R7 # brought to you by safe/smartmove
# new smartMove on: R6, R8
Move R6, R8 # brought to you by safe/smartmove
Add R8,R7
# new smartMove on: R3, R9
Move R3, R9 # brought to you by safe/smartmove
# new smartMove on: R7, R10
Move R7, R10 # brought to you by safe/smartmove
Mul R10,R9
# new smartMove on: R1, R11
Move R1, R11 # brought to you by safe/smartmove
# new smartMove on: R9, R12
Move R9, R12 # brought to you by safe/smartmove
# new smartMove on: 0, R13
Move 0, R14 # brought to you by safe/smartmove
Move R14, R13 # brought to you by safe/smartmove
Compare R11,R12
JumpFalse _l2
# new smartMove on: 1, R13
Move 1, R15 # brought to you by safe/smartmove
Move R15, R13 # brought to you by safe/smartmove
_l2:
# new smartMove on: R13, R16
Move R13, R16 # brought to you by safe/smartmove
Return R16
# Method g end
Return 9999
_A_sign:   # Method sign:
# Line 23: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpLE _l6
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l6:
Compare 0,R6		# If's condition check
JumpTrue _l4		# Conditional jump when If's outcome is true
_l3:   # If's then label
# Line 23: 
Move 1, R9
# new smartMove on: R9, R10
Move R9, R10 # brought to you by safe/smartmove
Return R10
Jump _l5		# Jump to end label(end of then part)
_l4:   # If's else label
# Line 26: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
# new smartMove on: R1, k_A_23
Move R1, k_A_23 # brought to you by safe/smartmove
# Line 28: 
# new smartMove on: k_A_23, R1
Move k_A_23, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, k_A_23 # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R4,R5
JumpFalse _l10
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l10:
Compare 0,R6		# If's condition check
JumpTrue _l8		# Conditional jump when If's outcome is true
_l7:   # If's then label
# Line 29: 
# new smartMove on: k_A_23, R9
Move k_A_23, R10 # brought to you by safe/smartmove
Move R10, R9 # brought to you by safe/smartmove
Move R10, k_A_23 # reversed
# new smartMove on: R9, R11
Move R9, R11 # brought to you by safe/smartmove
Return R11
Jump _l9		# Jump to end label(end of then part)
_l8:   # If's else label
_l9:   # End of If statement
Move 1, R1
Neg R1
# new smartMove on: R1, R2
Move R1, R2 # brought to you by safe/smartmove
Return R2
_l5:   # End of If statement
# Method sign end
Return 9999
_A_func1:   # Method func1:
# Line 39: 
# new smartMove on: k1, R1
Move k1, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, k1 # reversed
# new smartMove on: k1, R3
Move k1, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, k1 # reversed
# new smartMove on: R1, R5
Move R1, R5 # brought to you by safe/smartmove
# new smartMove on: R3, R6
Move R3, R6 # brought to you by safe/smartmove
Mul R6,R5
# new smartMove on: R5, k2_A_26
Move R5, k2_A_26 # brought to you by safe/smartmove
# Line 40: 
# Line 40: 
Move 1, R1
# new smartMove on: R1, k2_A_27
Move R1, k2_A_27 # brought to you by safe/smartmove
# Line 42: 
Move 0, R1
# new smartMove on: R1, k2_A_28
Move R1, k2_A_28 # brought to you by safe/smartmove
_l11:   # While
# new smartMove on: k2_A_28, R1
Move k2_A_28, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, k2_A_28 # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpGE _l13
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l13:
Compare 0,R6		# While condition check
JumpTrue _l12		# Conditional jump when while statement is false
# Line 44: 
Move str0, R9 # assigning literal to reg
Library __println(R9),R10
Jump _l11
_l12:   # False while condition
# Method func1 end
Return 9999
_ic_main:   # Main Method
# Line 52: 
Move 0, R1
# new smartMove on: R1, i_A_30
Move R1, i_A_30 # brought to you by safe/smartmove
# Line 53: 
Move 12, R1
# new smartMove on: R1, j_A_30
Move R1, j_A_30 # brought to you by safe/smartmove
# Line 54: 
Move 3, R1
# new smartMove on: j_A_30, R2
Move j_A_30, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, j_A_30 # reversed
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
Mul R5,R4
# new smartMove on: R4, k_A_30
Move R4, k_A_30 # brought to you by safe/smartmove
# Line 55: 
# Line 55: 
Move 1, R1
# new smartMove on: R1, i_A_31
Move R1, i_A_31 # brought to you by safe/smartmove
Move 1, R1
# new smartMove on: R1, j_A_31
Move R1, j_A_31 # brought to you by safe/smartmove
# new smartMove on: j_A_31, R1
Move j_A_31, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, j_A_31 # reversed
# new smartMove on: R1, k_A_31
Move R1, k_A_31 # brought to you by safe/smartmove
# Line 59: 
Move 1, R1
# new smartMove on: R1, k_A_32
Move R1, k_A_32 # brought to you by safe/smartmove
# new smartMove on: k_A_32, R1
Move k_A_32, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, k_A_32 # reversed
Compare 0,R1		# If's condition check
JumpTrue _l15		# Conditional jump when If's outcome is true
_l14:   # If's then label
# Line 61: 
Move 2, R3
# new smartMove on: R3, i_A_33
Move R3, i_A_33 # brought to you by safe/smartmove
# new smartMove on: i_A_33, R2
Move i_A_33, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, i_A_33 # reversed
Move 1, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Add R6,R5
# TMP 1
# new smartMove on: R5, j_A_31
Move R5, j_A_31 # brought to you by safe/smartmove
Jump _l16		# Jump to end label(end of then part)
_l15:   # If's else label
_l16:   # End of If statement
# Line 67: 
# new smartMove on: j_A_30, R1
Move j_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, j_A_30 # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpLE _l20
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l20:
Compare 0,R6		# If's condition check
JumpTrue _l18		# Conditional jump when If's outcome is true
_l17:   # If's then label
# Line 67: 
Move 2, R10
# TMP 1
# new smartMove on: R10, i_A_30
Move R10, i_A_30 # brought to you by safe/smartmove
Move 15, R2
# TMP 1
# new smartMove on: R2, j_A_30
Move R2, j_A_30 # brought to you by safe/smartmove
Jump _l19		# Jump to end label(end of then part)
_l18:   # If's else label
_l19:   # End of If statement
# Line 71: 
Move 0, R2
Move 2, R3
# new smartMove on: R2, R4
Move R2, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
Sub R5,R4
# TMP 1
# new smartMove on: R4, j_A_30
Move R4, j_A_30 # brought to you by safe/smartmove
# Line 72: 
# new smartMove on: i_A_30, R1
Move i_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i_A_30 # reversed
# new smartMove on: j_A_30, R3
Move j_A_30, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, j_A_30 # reversed
# new smartMove on: R1, R5
Move R1, R5 # brought to you by safe/smartmove
# new smartMove on: R3, R6
Move R3, R6 # brought to you by safe/smartmove
Add R6,R5
Library __printi(R5),R7
# Line 73: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 74: 
# new smartMove on: i_A_30, R1
Move i_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i_A_30 # reversed
# new smartMove on: i_A_30, R3
Move i_A_30, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, i_A_30 # reversed
# new smartMove on: j_A_30, R5
Move j_A_30, R6 # brought to you by safe/smartmove
Move R6, R5 # brought to you by safe/smartmove
Move R6, j_A_30 # reversed
StaticCall _A_f(i=R3,j=R5),R7
StaticCall _A_f(i=R1,j=R7),R8
Library __printi(R8),R9
# Line 75: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 76: 
# new smartMove on: i_A_30, R1
Move i_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i_A_30 # reversed
# new smartMove on: j_A_30, R3
Move j_A_30, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, j_A_30 # reversed
StaticCall _A_g(k1=R1,k2=R3),R5
Library __printb(R5),R6
# Line 77: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 78: 
Move 26, R1
Move 0, R2
Move 0, R3
StaticCall _A_f(i=R2,j=R3),R4
StaticCall _A_g(k1=R1,k2=R4),R5
Library __printb(R5),R6
# Line 79: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 80: 
# new smartMove on: i_A_30, R1
Move i_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i_A_30 # reversed
StaticCall _A_sign(n=R1),R3
Library __printi(R3),R4
# Line 81: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 82: 
# new smartMove on: j_A_30, R1
Move j_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, j_A_30 # reversed
StaticCall _A_sign(n=R1),R3
Library __printi(R3),R4
# Line 83: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 84: 
Move 0, R1
StaticCall _A_sign(n=R1),R2
Library __printi(R2),R3
# Line 85: 
Move 12, R1
StaticCall _A_func1(k1=R1),R2
# Line 86: 
Move 20000, R1
Neg R1
StaticCall _A_func1(k1=R1),R2
# Line 87: 
Move 0, R1
StaticCall _A_func1(k1=R1),R2
# Line 89: 
Library __allocateObject(16),R1 # Allocation of B
MoveField _DV_B,R1.0 # Move field for DV pointer
# new smartMove on: R1, b_A_30
Move R1, b_A_30 # brought to you by safe/smartmove
# Line 90: 
# new smartMove on: b_A_30, R2
Move b_A_30, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, b_A_30 # reversed
VirtualCall R2.0(),R2
# Line 91: 
# Line 91: 
Move 23, R1
# new smartMove on: R1, b_A_35
Move R1, b_A_35 # brought to you by safe/smartmove
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# new smartMove on: b_A_35, R1
Move b_A_35, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, b_A_35 # reversed
Library __printi(R1),R3
# Line 96: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 97: 
# new smartMove on: b_A_30, R1
Move b_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, b_A_30 # reversed
Compare 0,R1
JumpTrue _null_reference
# new smartMove on: R1.1, R3
MoveField R1.1,R4 # SMART MOVED BITCH - field style
Move R4, R3 # brought to you by safe/smartmove
MoveField R4,R1.1 # reversed
Library __printi(R3),R5
# Line 98: 
Move str1, R1 # assigning literal to reg
Library __println(R1),R2
# Line 99: 
# new smartMove on: b_A_30, R1
Move b_A_30, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, b_A_30 # reversed
Compare 0,R1
JumpTrue _null_reference
# new smartMove on: R1.3, R3
MoveField R1.3,R4 # SMART MOVED BITCH - field style
Move R4, R3 # brought to you by safe/smartmove
MoveField R4,R1.3 # reversed
Library __printb(R3),R5
Library __exit(0),Rdummy
# Method main end
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

