
######################
# Program ~loops.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative or zero array size allocation. Program will no exit. "
null_reference: "Null reference. Program will no exit. "
illegal_arr_loc: "Illegal array location. Program will no exit. "
dev_by_zero: "Devision by zero. Program will no exit. "
str0: "The sum of sums from 1 to "
str1: " is: "
str2: ""
str3: "The factorial of "
str4: "The sum of factorials from 1 to "
str5: "The sum from 1 to "
######################

######################
# DISPATCH VECTORS
_DV_Loop: [_Loop_sum_of_sums,_Loop_sum_of_factorials]
_DV_Util: [_Util_sum1ToN]
######################

_Loop_sum_of_sums:   # Method sum_of_sums:
# Line 6: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
# new smartMove on: R1, start_Loop_18
Move R1, start_Loop_18 # brought to you by safe/smartmove
# Line 7: 
Move 0, R1
# new smartMove on: R1, sum_Loop_18
Move R1, sum_Loop_18 # brought to you by safe/smartmove
# Line 8: 
_l1:   # While
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpLE _l3
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l3:
Compare 0,R6		# While condition check
JumpTrue _l2		# Conditional jump when while statement is false
# Line 8: 
# new smartMove on: sum_Loop_18, R10
Move sum_Loop_18, R11 # brought to you by safe/smartmove
Move R11, R10 # brought to you by safe/smartmove
Move R11, sum_Loop_18 # reversed
# new smartMove on: n, R13
Move n, R14 # brought to you by safe/smartmove
Move R14, R13 # brought to you by safe/smartmove
Move R14, n # reversed
# new smartMove on: this, R15
Move this, R16 # brought to you by safe/smartmove
Move R16, R15 # brought to you by safe/smartmove
Move R16, this # reversed
Compare 0,R15
JumpTrue _null_reference
# new smartMove on: R15.1, R17
MoveField R15.1,R18 # SMART MOVED BITCH - field style
Move R18, R17 # brought to you by safe/smartmove
MoveField R18,R15.1 # reversed
VirtualCall R17.0(n=R13),R17
# new smartMove on: R10, R19
Move R10, R19 # brought to you by safe/smartmove
# new smartMove on: R17, R20
Move R17, R20 # brought to you by safe/smartmove
Add R20,R19
# TMP 1
# new smartMove on: R19, sum_Loop_18
Move R19, sum_Loop_18 # brought to you by safe/smartmove
# new smartMove on: n, R2
Move n, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, n # reversed
Move 1, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Sub R6,R5
# TMP 1
# new smartMove on: R5, n
Move R5, n # brought to you by safe/smartmove
Jump _l1
_l2:   # False while condition
# Line 12: 
Move str0, R1 # assigning literal to reg
Library __print(R1),R2
# Line 13: 
# new smartMove on: start_Loop_18, R1
Move start_Loop_18, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, start_Loop_18 # reversed
Library __printi(R1),R3
# Line 14: 
Move str1, R1 # assigning literal to reg
Library __print(R1),R2
# Line 15: 
# new smartMove on: sum_Loop_18, R1
Move sum_Loop_18, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, sum_Loop_18 # reversed
Library __printi(R1),R3
# Line 16: 
Move str2, R1 # assigning literal to reg
Library __println(R1),R2
Return 9999
_Loop_sum_of_factorials:   # Method sum_of_factorials:
# Line 20: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
# new smartMove on: R1, start_Loop_20
Move R1, start_Loop_20 # brought to you by safe/smartmove
# Line 21: 
Move 0, R1
# new smartMove on: R1, sum_Loop_20
Move R1, sum_Loop_20 # brought to you by safe/smartmove
# Line 22: 
_l4:   # While
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpLE _l6
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l6:
Compare 0,R6		# While condition check
JumpTrue _l5		# Conditional jump when while statement is false
# Line 22: 
Move 1, R9
# new smartMove on: R9, factorial_Loop_21
Move R9, factorial_Loop_21 # brought to you by safe/smartmove
Move 1, R1
# new smartMove on: R1, i_Loop_21
Move R1, i_Loop_21 # brought to you by safe/smartmove
_l7:   # While
# new smartMove on: i_Loop_21, R1
Move i_Loop_21, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, i_Loop_21 # reversed
# new smartMove on: n, R3
Move n, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, n # reversed
# new smartMove on: R1, R5
Move R1, R5 # brought to you by safe/smartmove
# new smartMove on: R3, R6
Move R3, R6 # brought to you by safe/smartmove
# new smartMove on: 0, R7
Move 0, R8 # brought to you by safe/smartmove
Move R8, R7 # brought to you by safe/smartmove
Compare R6,R5
JumpG _l9
# new smartMove on: 1, R7
Move 1, R9 # brought to you by safe/smartmove
Move R9, R7 # brought to you by safe/smartmove
_l9:
Compare 0,R7		# While condition check
JumpTrue _l8		# Conditional jump when while statement is false
# Line 25: 
# new smartMove on: factorial_Loop_21, R11
Move factorial_Loop_21, R12 # brought to you by safe/smartmove
Move R12, R11 # brought to you by safe/smartmove
Move R12, factorial_Loop_21 # reversed
# new smartMove on: i_Loop_21, R13
Move i_Loop_21, R14 # brought to you by safe/smartmove
Move R14, R13 # brought to you by safe/smartmove
Move R14, i_Loop_21 # reversed
# new smartMove on: R11, R15
Move R11, R15 # brought to you by safe/smartmove
# new smartMove on: R13, R16
Move R13, R16 # brought to you by safe/smartmove
Mul R16,R15
# TMP 1
# new smartMove on: R15, factorial_Loop_21
Move R15, factorial_Loop_21 # brought to you by safe/smartmove
# new smartMove on: i_Loop_21, R2
Move i_Loop_21, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, i_Loop_21 # reversed
Move 1, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Add R6,R5
# TMP 1
# new smartMove on: R5, i_Loop_21
Move R5, i_Loop_21 # brought to you by safe/smartmove
Jump _l7
_l8:   # False while condition
Move str3, R1 # assigning literal to reg
Library __print(R1),R2
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Library __printi(R1),R3
Move str1, R1 # assigning literal to reg
Library __print(R1),R2
# new smartMove on: factorial_Loop_21, R1
Move factorial_Loop_21, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, factorial_Loop_21 # reversed
Library __printi(R1),R3
Move str2, R1 # assigning literal to reg
Library __println(R1),R2
# new smartMove on: sum_Loop_20, R2
Move sum_Loop_20, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, sum_Loop_20 # reversed
# new smartMove on: factorial_Loop_21, R4
Move factorial_Loop_21, R5 # brought to you by safe/smartmove
Move R5, R4 # brought to you by safe/smartmove
Move R5, factorial_Loop_21 # reversed
# new smartMove on: R2, R6
Move R2, R6 # brought to you by safe/smartmove
# new smartMove on: R4, R7
Move R4, R7 # brought to you by safe/smartmove
Add R7,R6
# TMP 1
# new smartMove on: R6, sum_Loop_20
Move R6, sum_Loop_20 # brought to you by safe/smartmove
# new smartMove on: n, R2
Move n, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, n # reversed
Move 1, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Sub R6,R5
# TMP 1
# new smartMove on: R5, n
Move R5, n # brought to you by safe/smartmove
Jump _l4
_l5:   # False while condition
# Line 37: 
Move str4, R1 # assigning literal to reg
Library __print(R1),R2
# Line 38: 
# new smartMove on: start_Loop_20, R1
Move start_Loop_20, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, start_Loop_20 # reversed
Library __printi(R1),R3
# Line 39: 
Move str1, R1 # assigning literal to reg
Library __print(R1),R2
# Line 40: 
# new smartMove on: sum_Loop_20, R1
Move sum_Loop_20, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, sum_Loop_20 # reversed
Library __printi(R1),R3
# Line 41: 
Move str2, R1 # assigning literal to reg
Library __println(R1),R2
# Method sum_of_factorials end
Return 9999
_ic_main:   # Main Method
# Line 45: 
Library __allocateObject(8),R1 # Allocation of Loop
MoveField _DV_Loop,R1.0 # Move field for DV pointer
# new smartMove on: R1, objLoop_Loop_23
Move R1, objLoop_Loop_23 # brought to you by safe/smartmove
# Line 46: 
Library __allocateObject(4),R2 # Allocation of Util
MoveField _DV_Util,R2.0 # Move field for DV pointer
# TMP 1
# new smartMove on: R2, objLoop_Loop_23.1
Move objLoop_Loop_23, R4 # brought to you by safe/smartmove
MoveField R4.1,R3 # SMART MOVED BITCH - field style
Move R2, R3 # brought to you by safe/smartmove
MoveField R3,R4.1 # reversed
Move R4, objLoop_Loop_23 # reversed
# Line 47: 
Move 10, R2
# new smartMove on: objLoop_Loop_23, R3
Move objLoop_Loop_23, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, objLoop_Loop_23 # reversed
VirtualCall R3.0(n=R2),R3
# Line 48: 
Move 10, R1
StaticCall _Loop_sum_of_factorials(n=R1),R2
Library __exit(0),Rdummy
# Method main end
Return 9999
_Util_sum1ToN:   # Method sum1ToN:
# Line 57: 
Move 0, R1
# new smartMove on: R1, sum_Util_24
Move R1, sum_Util_24 # brought to you by safe/smartmove
# Line 58: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
# new smartMove on: R1, start_Util_24
Move R1, start_Util_24 # brought to you by safe/smartmove
# Line 59: 
_l10:   # While
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Move 0, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R5,R4
JumpLE _l12
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l12:
Compare 0,R6		# While condition check
JumpTrue _l11		# Conditional jump when while statement is false
# Line 59: 
# new smartMove on: sum_Util_24, R10
Move sum_Util_24, R11 # brought to you by safe/smartmove
Move R11, R10 # brought to you by safe/smartmove
Move R11, sum_Util_24 # reversed
# new smartMove on: n, R12
Move n, R13 # brought to you by safe/smartmove
Move R13, R12 # brought to you by safe/smartmove
Move R13, n # reversed
# new smartMove on: R10, R14
Move R10, R14 # brought to you by safe/smartmove
# new smartMove on: R12, R15
Move R12, R15 # brought to you by safe/smartmove
Add R15,R14
# TMP 1
# new smartMove on: R14, sum_Util_24
Move R14, sum_Util_24 # brought to you by safe/smartmove
# new smartMove on: n, R2
Move n, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, n # reversed
Move 1, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Sub R6,R5
# TMP 1
# new smartMove on: R5, n
Move R5, n # brought to you by safe/smartmove
Jump _l10
_l11:   # False while condition
# Line 63: 
Move str5, R1 # assigning literal to reg
Library __print(R1),R2
# Line 64: 
# new smartMove on: start_Util_24, R1
Move start_Util_24, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, start_Util_24 # reversed
Library __printi(R1),R3
# Line 65: 
Move str1, R1 # assigning literal to reg
Library __print(R1),R2
# Line 66: 
# new smartMove on: sum_Util_24, R1
Move sum_Util_24, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, sum_Util_24 # reversed
Library __printi(R1),R3
# Line 67: 
Move str2, R1 # assigning literal to reg
Library __println(R1),R2
# Line 68: 
# new smartMove on: sum_Util_24, R1
Move sum_Util_24, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, sum_Util_24 # reversed
# new smartMove on: R1, R3
Move R1, R3 # brought to you by safe/smartmove
Return R3
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

