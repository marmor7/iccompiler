
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Tue Jul 08 20:09:41 GMT+02:00 2008
//----------------------------------------------------

package IC.Parser;

import IC.*;
import IC.AST.*;
import java.util.*;
import IC.DataTypes;
import java_cup.runtime.Symbol;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Tue Jul 08 20:09:41 GMT+02:00 2008
  */
public @SuppressWarnings(value={"all"}) class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\125\000\002\003\003\000\002\002\004\000\002\004" +
    "\011\000\002\004\002\000\002\005\004\000\002\005\002" +
    "\000\002\006\004\000\002\006\002\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\005\000\002\034" +
    "\004\000\002\007\006\000\002\014\005\000\002\014\002" +
    "\000\002\010\013\000\002\010\013\000\002\010\012\000" +
    "\002\010\012\000\002\015\005\000\002\015\002\000\002" +
    "\016\006\000\002\016\002\000\002\017\004\000\002\017" +
    "\002\000\002\020\006\000\002\020\004\000\002\020\004" +
    "\000\002\020\005\000\002\020\005\000\002\020\007\000" +
    "\002\020\007\000\002\020\004\000\002\020\004\000\002" +
    "\020\005\000\002\020\005\000\002\020\007\000\002\035" +
    "\005\000\002\021\003\000\002\021\005\000\002\021\006" +
    "\000\002\022\003\000\002\022\007\000\002\022\003\000" +
    "\002\022\003\000\002\022\006\000\002\022\005\000\002" +
    "\022\005\000\002\022\005\000\002\022\005\000\002\022" +
    "\005\000\002\022\005\000\002\022\005\000\002\022\004" +
    "\000\002\022\004\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\025\010\000\002" +
    "\026\004\000\002\026\002\000\002\027\005\000\002\027" +
    "\002\000\002\024\010\000\002\024\006\000\002\030\003" +
    "\000\002\030\003\000\002\030\003\000\002\030\003\000" +
    "\002\030\003\000\002\030\003\000\002\030\003\000\002" +
    "\030\003\000\002\032\003\000\002\031\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\002\ufffe\056\ufffe\001\002\000\004\002" +
    "\255\001\002\000\006\002\001\056\006\001\002\000\004" +
    "\057\007\001\002\000\006\027\011\035\ufffc\001\002\000" +
    "\004\035\013\001\002\000\004\057\012\001\002\000\004" +
    "\035\ufffd\001\002\000\020\012\ufffa\013\ufffa\016\ufffa\036" +
    "\ufffa\050\ufffa\057\ufffa\061\ufffa\001\002\000\020\012\017" +
    "\013\023\016\022\036\025\050\016\057\024\061\021\001" +
    "\002\000\020\012\ufff8\013\ufff8\016\ufff8\036\ufff8\050\ufff8" +
    "\057\ufff8\061\ufff8\001\002\000\006\032\ufff6\040\ufff6\001" +
    "\002\000\014\013\023\016\236\050\016\057\024\061\021" +
    "\001\002\000\020\012\ufffb\013\ufffb\016\ufffb\036\ufffb\050" +
    "\ufffb\057\ufffb\061\ufffb\001\002\000\006\032\ufff7\040\ufff7" +
    "\001\002\000\004\032\226\001\002\000\006\032\ufff5\040" +
    "\ufff5\001\002\000\006\032\ufff4\040\ufff4\001\002\000\006" +
    "\002\uffff\056\uffff\001\002\000\006\032\030\040\031\001" +
    "\002\000\020\012\ufff9\013\ufff9\016\ufff9\036\ufff9\050\ufff9" +
    "\057\ufff9\061\ufff9\001\002\000\010\011\uffef\033\034\037" +
    "\uffef\001\002\000\004\041\032\001\002\000\006\032\ufff3" +
    "\040\ufff3\001\002\000\006\011\224\037\223\001\002\000" +
    "\014\013\uffe7\034\uffe9\050\uffe7\057\uffe7\061\uffe7\001\002" +
    "\000\004\034\042\001\002\000\012\013\023\050\016\057" +
    "\024\061\021\001\002\000\006\032\040\040\031\001\002" +
    "\000\006\034\uffea\037\041\001\002\000\012\013\uffe8\050" +
    "\uffe8\057\uffe8\061\uffe8\001\002\000\004\035\043\001\002" +
    "\000\056\005\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\057\uffe5\061\uffe5\062\uffe5\001\002\000\056\005\072" +
    "\007\076\010\054\013\023\014\065\015\063\023\064\024" +
    "\052\025\046\030\061\032\062\033\051\035\047\036\101" +
    "\046\067\047\057\050\016\051\073\052\070\057\074\061" +
    "\021\062\066\001\002\000\042\006\uffd4\017\uffd4\020\uffd4" +
    "\021\uffd4\022\uffd4\026\uffd4\040\uffd4\042\uffd4\043\uffd4\044" +
    "\uffd4\045\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\060\220" +
    "\001\002\000\004\011\217\001\002\000\056\005\uffe5\007" +
    "\uffe5\010\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\024\uffe5" +
    "\025\uffe5\030\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\046" +
    "\uffe5\047\uffe5\050\uffe5\051\uffe5\052\uffe5\057\uffe5\061\uffe5" +
    "\062\uffe5\001\002\000\040\006\122\017\125\020\124\021" +
    "\127\022\117\026\131\040\133\042\132\043\135\044\123" +
    "\045\120\052\115\053\121\054\126\055\116\001\002\000" +
    "\032\005\072\007\076\014\065\015\063\023\064\032\062" +
    "\033\051\046\067\047\057\051\073\052\070\057\105\001" +
    "\002\000\004\033\207\001\002\000\006\032\202\040\031" +
    "\001\002\000\034\005\072\007\076\011\200\014\065\015" +
    "\063\023\064\032\062\033\051\046\067\047\057\051\073" +
    "\052\070\057\105\001\002\000\032\005\072\007\076\014" +
    "\065\015\063\023\064\032\062\033\051\046\067\047\057" +
    "\051\073\052\070\057\105\001\002\000\050\006\uffc3\011" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\026\uffc3\034\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\052\uffc3\053\uffc3\054\uffc3\055\uffc3\001\002\000\050" +
    "\006\uffaf\011\uffaf\017\uffaf\020\uffaf\021\uffaf\022\uffaf\026" +
    "\uffaf\034\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043\uffaf" +
    "\044\uffaf\045\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001" +
    "\002\000\050\006\uffc4\011\uffc4\017\uffc4\020\uffc4\021\uffc4" +
    "\022\uffc4\026\uffc4\034\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\043\uffc4\044\uffc4\045\uffc4\052\uffc4\053\uffc4\054\uffc4" +
    "\055\uffc4\001\002\000\004\033\170\001\002\000\054\006" +
    "\uffd7\011\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7\026\uffd7" +
    "\033\164\034\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\045\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\060\uffd7\001\002\000\050\006\uffd1\011\uffd1\017\uffd1\020" +
    "\uffd1\021\uffd1\022\uffd1\026\uffd1\034\uffd1\037\uffd1\040\uffd1" +
    "\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\052\uffd1\053" +
    "\uffd1\054\uffd1\055\uffd1\001\002\000\032\005\uffb2\007\uffb2" +
    "\014\uffb2\015\uffb2\023\uffb2\032\uffb2\033\uffb2\046\uffb2\047" +
    "\uffb2\051\uffb2\052\uffb2\057\uffb2\001\002\000\050\006\uffb0" +
    "\011\uffb0\017\uffb0\020\uffb0\021\uffb0\022\uffb0\026\uffb0\034" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\052\uffb0\053\uffb0\054\uffb0\055\uffb0\001\002\000" +
    "\004\011\163\001\002\000\050\006\uffae\011\uffae\017\uffae" +
    "\020\uffae\021\uffae\022\uffae\026\uffae\034\uffae\037\uffae\040" +
    "\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\052\uffae" +
    "\053\uffae\054\uffae\055\uffae\001\002\000\032\005\uffb3\007" +
    "\uffb3\014\uffb3\015\uffb3\023\uffb3\032\uffb3\033\uffb3\046\uffb3" +
    "\047\uffb3\051\uffb3\052\uffb3\057\uffb3\001\002\000\050\006" +
    "\uffc6\011\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\026\uffc6" +
    "\034\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6\044" +
    "\uffc6\045\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\001\002" +
    "\000\012\013\023\050\016\057\155\061\021\001\002\000" +
    "\050\006\uffb1\011\uffb1\017\uffb1\020\uffb1\021\uffb1\022\uffb1" +
    "\026\uffb1\034\uffb1\037\uffb1\040\uffb1\041\uffb1\042\uffb1\043" +
    "\uffb1\044\uffb1\045\uffb1\052\uffb1\053\uffb1\054\uffb1\055\uffb1" +
    "\001\002\000\010\026\106\032\ufff4\040\ufff4\001\002\000" +
    "\042\006\uffd2\011\153\017\uffd2\020\uffd2\021\uffd2\022\uffd2" +
    "\026\uffd2\040\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\052" +
    "\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\050\006\uffad" +
    "\011\uffad\017\uffad\020\uffad\021\uffad\022\uffad\026\uffad\034" +
    "\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043\uffad\044\uffad" +
    "\045\uffad\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000" +
    "\056\005\uffe6\007\uffe6\010\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\023\uffe6\024\uffe6\025\uffe6\030\uffe6\032\uffe6\033\uffe6\035" +
    "\uffe6\036\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\052\uffe6" +
    "\057\uffe6\061\uffe6\062\uffe6\001\002\000\032\005\072\007" +
    "\076\014\065\015\063\023\064\032\062\033\051\046\067" +
    "\047\057\051\073\052\070\057\105\001\002\000\020\012" +
    "\uffec\013\uffec\016\uffec\036\uffec\050\uffec\057\uffec\061\uffec" +
    "\001\002\000\050\006\uffd4\011\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\026\uffd4\034\uffd4\037\uffd4\040\uffd4\041\uffd4" +
    "\042\uffd4\043\uffd4\044\uffd4\045\uffd4\052\uffd4\053\uffd4\054" +
    "\uffd4\055\uffd4\001\002\000\050\006\122\011\uffc8\017\125" +
    "\020\124\021\127\022\117\026\131\034\uffc8\037\uffc8\040" +
    "\133\041\uffc8\042\132\043\135\044\123\045\120\052\115" +
    "\053\121\054\126\055\116\001\002\000\050\006\uffd2\011" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\026\uffd2\034\uffd2" +
    "\037\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045" +
    "\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2\001\002\000\004" +
    "\026\106\001\002\000\004\032\107\001\002\000\004\033" +
    "\110\001\002\000\034\005\uffbe\007\uffbe\014\uffbe\015\uffbe" +
    "\023\uffbe\032\uffbe\033\uffbe\034\uffc0\046\uffbe\047\uffbe\051" +
    "\uffbe\052\uffbe\057\uffbe\001\002\000\032\005\072\007\076" +
    "\014\065\015\063\023\064\032\062\033\051\046\067\047" +
    "\057\051\073\052\070\057\105\001\002\000\004\034\113" +
    "\001\002\000\050\006\uffc2\011\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\022\uffc2\026\uffc2\034\uffc2\037\uffc2\040\uffc2\041\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\045\uffc2\052\uffc2\053\uffc2\054" +
    "\uffc2\055\uffc2\001\002\000\044\006\122\017\125\020\124" +
    "\021\127\022\117\026\131\034\uffc1\037\134\040\133\042" +
    "\132\043\135\044\123\045\120\052\115\053\121\054\126" +
    "\055\116\001\002\000\032\005\072\007\076\014\065\015" +
    "\063\023\064\032\062\033\051\046\067\047\057\051\073" +
    "\052\070\057\105\001\002\000\032\005\072\007\076\014" +
    "\065\015\063\023\064\032\062\033\051\046\067\047\057" +
    "\051\073\052\070\057\105\001\002\000\032\005\uffbb\007" +
    "\uffbb\014\uffbb\015\uffbb\023\uffbb\032\uffbb\033\uffbb\046\uffbb" +
    "\047\uffbb\051\uffbb\052\uffbb\057\uffbb\001\002\000\032\005" +
    "\uffb8\007\uffb8\014\uffb8\015\uffb8\023\uffb8\032\uffb8\033\uffb8" +
    "\046\uffb8\047\uffb8\051\uffb8\052\uffb8\057\uffb8\001\002\000" +
    "\032\005\072\007\076\014\065\015\063\023\064\032\062" +
    "\033\051\046\067\047\057\051\073\052\070\057\105\001" +
    "\002\000\032\005\072\007\076\014\065\015\063\023\064" +
    "\032\062\033\051\046\067\047\057\051\073\052\070\057" +
    "\105\001\002\000\032\005\uffb6\007\uffb6\014\uffb6\015\uffb6" +
    "\023\uffb6\032\uffb6\033\uffb6\046\uffb6\047\uffb6\051\uffb6\052" +
    "\uffb6\057\uffb6\001\002\000\032\005\uffb5\007\uffb5\014\uffb5" +
    "\015\uffb5\023\uffb5\032\uffb5\033\uffb5\046\uffb5\047\uffb5\051" +
    "\uffb5\052\uffb5\057\uffb5\001\002\000\032\005\uffb4\007\uffb4" +
    "\014\uffb4\015\uffb4\023\uffb4\032\uffb4\033\uffb4\046\uffb4\047" +
    "\uffb4\051\uffb4\052\uffb4\057\uffb4\001\002\000\032\005\072" +
    "\007\076\014\065\015\063\023\064\032\062\033\051\046" +
    "\067\047\057\051\073\052\070\057\105\001\002\000\032" +
    "\005\uffba\007\uffba\014\uffba\015\uffba\023\uffba\032\uffba\033" +
    "\uffba\046\uffba\047\uffba\051\uffba\052\uffba\057\uffba\001\002" +
    "\000\032\005\072\007\076\014\065\015\063\023\064\032" +
    "\062\033\051\046\067\047\057\051\073\052\070\057\105" +
    "\001\002\000\006\004\141\032\140\001\002\000\032\005" +
    "\uffb9\007\uffb9\014\uffb9\015\uffb9\023\uffb9\032\uffb9\033\uffb9" +
    "\046\uffb9\047\uffb9\051\uffb9\052\uffb9\057\uffb9\001\002\000" +
    "\032\005\072\007\076\014\065\015\063\023\064\032\062" +
    "\033\051\046\067\047\057\051\073\052\070\057\105\001" +
    "\002\000\032\005\uffbf\007\uffbf\014\uffbf\015\uffbf\023\uffbf" +
    "\032\uffbf\033\uffbf\046\uffbf\047\uffbf\051\uffbf\052\uffbf\057" +
    "\uffbf\001\002\000\032\005\uffb7\007\uffb7\014\uffb7\015\uffb7" +
    "\023\uffb7\032\uffb7\033\uffb7\046\uffb7\047\uffb7\051\uffb7\052" +
    "\uffb7\057\uffb7\001\002\000\042\006\122\017\125\020\124" +
    "\021\127\022\117\026\131\040\133\041\137\042\132\043" +
    "\135\044\123\045\120\052\115\053\121\054\126\055\116" +
    "\001\002\000\052\006\uffd5\011\uffd5\017\uffd5\020\uffd5\021" +
    "\uffd5\022\uffd5\026\uffd5\034\uffd5\037\uffd5\040\uffd5\041\uffd5" +
    "\042\uffd5\043\uffd5\044\uffd5\045\uffd5\052\uffd5\053\uffd5\054" +
    "\uffd5\055\uffd5\060\uffd5\001\002\000\054\006\uffd6\011\uffd6" +
    "\017\uffd6\020\uffd6\021\uffd6\022\uffd6\026\uffd6\033\142\034" +
    "\uffd6\037\uffd6\040\uffd6\041\uffd6\042\uffd6\043\uffd6\044\uffd6" +
    "\045\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\060\uffd6\001" +
    "\002\000\050\006\uffcf\011\uffcf\017\uffcf\020\uffcf\021\uffcf" +
    "\022\uffcf\026\uffcf\034\uffcf\037\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\uffcf\052\uffcf\053\uffcf\054\uffcf" +
    "\055\uffcf\001\002\000\034\005\uffbe\007\uffbe\014\uffbe\015" +
    "\uffbe\023\uffbe\032\uffbe\033\uffbe\034\uffc0\046\uffbe\047\uffbe" +
    "\051\uffbe\052\uffbe\057\uffbe\001\002\000\004\034\144\001" +
    "\002\000\050\006\uffbd\011\uffbd\017\uffbd\020\uffbd\021\uffbd" +
    "\022\uffbd\026\uffbd\034\uffbd\037\uffbd\040\uffbd\041\uffbd\042" +
    "\uffbd\043\uffbd\044\uffbd\045\uffbd\052\uffbd\053\uffbd\054\uffbd" +
    "\055\uffbd\001\002\000\050\006\122\011\uffce\017\125\020" +
    "\124\021\127\022\117\026\131\034\uffce\037\uffce\040\133" +
    "\041\uffce\042\132\043\135\044\123\045\120\052\115\053" +
    "\121\054\126\055\116\001\002\000\050\006\122\011\uffcd" +
    "\017\uffcd\020\uffcd\021\uffcd\022\uffcd\026\131\034\uffcd\037" +
    "\uffcd\040\133\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd" +
    "\052\uffcd\053\121\054\uffcd\055\116\001\002\000\050\006" +
    "\uffc9\011\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\026\131" +
    "\034\uffc9\037\uffc9\040\133\041\uffc9\042\uffc9\043\uffc9\044" +
    "\uffc9\045\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\001\002" +
    "\000\050\006\uffcb\011\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\026\131\034\uffcb\037\uffcb\040\133\041\uffcb\042\uffcb" +
    "\043\uffcb\044\uffcb\045\uffcb\052\uffcb\053\uffcb\054\uffcb\055" +
    "\uffcb\001\002\000\050\006\uffca\011\uffca\017\uffca\020\uffca" +
    "\021\uffca\022\uffca\026\131\034\uffca\037\uffca\040\133\041" +
    "\uffca\042\uffca\043\uffca\044\uffca\045\uffca\052\uffca\053\uffca" +
    "\054\uffca\055\uffca\001\002\000\050\006\122\011\uffcc\017" +
    "\uffcc\020\uffcc\021\uffcc\022\uffcc\026\131\034\uffcc\037\uffcc" +
    "\040\133\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\052" +
    "\uffcc\053\121\054\uffcc\055\116\001\002\000\060\005\uffe3" +
    "\007\uffe3\010\uffe3\013\uffe3\014\uffe3\015\uffe3\023\uffe3\024" +
    "\uffe3\025\uffe3\030\uffe3\031\uffe3\032\uffe3\033\uffe3\035\uffe3" +
    "\036\uffe3\046\uffe3\047\uffe3\050\uffe3\051\uffe3\052\uffe3\057" +
    "\uffe3\061\uffe3\062\uffe3\001\002\000\004\040\160\001\002" +
    "\000\006\033\156\040\ufff4\001\002\000\004\034\157\001" +
    "\002\000\050\006\uffd0\011\uffd0\017\uffd0\020\uffd0\021\uffd0" +
    "\022\uffd0\026\uffd0\034\uffd0\037\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\052\uffd0\053\uffd0\054\uffd0" +
    "\055\uffd0\001\002\000\034\005\072\007\076\014\065\015" +
    "\063\023\064\032\062\033\051\041\032\046\067\047\057" +
    "\051\073\052\070\057\105\001\002\000\042\006\122\017" +
    "\125\020\124\021\127\022\117\026\131\040\133\041\162" +
    "\042\132\043\135\044\123\045\120\052\115\053\121\054" +
    "\126\055\116\001\002\000\050\006\uffd3\011\uffd3\017\uffd3" +
    "\020\uffd3\021\uffd3\022\uffd3\026\uffd3\034\uffd3\037\uffd3\040" +
    "\uffd3\041\uffd3\042\uffd3\043\uffd3\044\uffd3\045\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\001\002\000\060\005\uffdd\007" +
    "\uffdd\010\uffdd\013\uffdd\014\uffdd\015\uffdd\023\uffdd\024\uffdd" +
    "\025\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\035\uffdd\036" +
    "\uffdd\046\uffdd\047\uffdd\050\uffdd\051\uffdd\052\uffdd\057\uffdd" +
    "\061\uffdd\062\uffdd\001\002\000\034\005\uffbe\007\uffbe\014" +
    "\uffbe\015\uffbe\023\uffbe\032\uffbe\033\uffbe\034\uffc0\046\uffbe" +
    "\047\uffbe\051\uffbe\052\uffbe\057\uffbe\001\002\000\004\034" +
    "\166\001\002\000\050\006\uffbc\011\uffbc\017\uffbc\020\uffbc" +
    "\021\uffbc\022\uffbc\026\uffbc\034\uffbc\037\uffbc\040\uffbc\041" +
    "\uffbc\042\uffbc\043\uffbc\044\uffbc\045\uffbc\052\uffbc\053\uffbc" +
    "\054\uffbc\055\uffbc\001\002\000\054\005\072\007\076\010" +
    "\054\013\023\014\065\015\063\023\064\024\052\025\046" +
    "\030\061\032\062\033\051\035\047\046\067\047\057\050" +
    "\016\051\073\052\070\057\074\061\021\062\066\001\002" +
    "\000\032\005\072\007\076\014\065\015\063\023\064\032" +
    "\062\033\051\046\067\047\057\051\073\052\070\057\105" +
    "\001\002\000\042\006\122\017\125\020\124\021\127\022" +
    "\117\026\131\034\172\040\133\042\132\043\135\044\123" +
    "\045\120\052\115\053\121\054\126\055\116\001\002\000" +
    "\054\005\uffd8\007\uffd8\010\uffd8\013\uffd8\014\uffd8\015\uffd8" +
    "\023\uffd8\024\uffd8\025\uffd8\030\uffd8\032\uffd8\033\uffd8\035" +
    "\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8\052\uffd8\057\uffd8" +
    "\061\uffd8\062\uffd8\001\002\000\060\005\uffe0\007\uffe0\010" +
    "\uffe0\013\uffe0\014\uffe0\015\uffe0\023\uffe0\024\uffe0\025\uffe0" +
    "\030\uffe0\031\174\032\uffe0\033\uffe0\035\uffe0\036\uffe0\046" +
    "\uffe0\047\uffe0\050\uffe0\051\uffe0\052\uffe0\057\uffe0\061\uffe0" +
    "\062\uffe0\001\002\000\054\005\072\007\076\010\054\013" +
    "\023\014\065\015\063\023\064\024\052\025\046\030\061" +
    "\032\062\033\051\035\047\046\067\047\057\050\016\051" +
    "\073\052\070\057\074\061\021\062\066\001\002\000\060" +
    "\005\uffdf\007\uffdf\010\uffdf\013\uffdf\014\uffdf\015\uffdf\023" +
    "\uffdf\024\uffdf\025\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf" +
    "\035\uffdf\036\uffdf\046\uffdf\047\uffdf\050\uffdf\051\uffdf\052" +
    "\uffdf\057\uffdf\061\uffdf\062\uffdf\001\002\000\050\006\122" +
    "\011\uffc7\017\125\020\124\021\127\022\117\026\131\034" +
    "\uffc7\037\uffc7\040\133\041\uffc7\042\132\043\135\044\123" +
    "\045\120\052\115\053\121\054\126\055\116\001\002\000" +
    "\042\006\122\011\201\017\125\020\124\021\127\022\117" +
    "\026\131\040\133\042\132\043\135\044\123\045\120\052" +
    "\115\053\121\054\126\055\116\001\002\000\060\005\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\014\uffe2\015\uffe2\023\uffe2\024" +
    "\uffe2\025\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\035\uffe2" +
    "\036\uffe2\046\uffe2\047\uffe2\050\uffe2\051\uffe2\052\uffe2\057" +
    "\uffe2\061\uffe2\062\uffe2\001\002\000\060\005\uffe1\007\uffe1" +
    "\010\uffe1\013\uffe1\014\uffe1\015\uffe1\023\uffe1\024\uffe1\025" +
    "\uffe1\030\uffe1\031\uffe1\032\uffe1\033\uffe1\035\uffe1\036\uffe1" +
    "\046\uffe1\047\uffe1\050\uffe1\051\uffe1\052\uffe1\057\uffe1\061" +
    "\uffe1\062\uffe1\001\002\000\006\011\203\060\204\001\002" +
    "\000\060\005\uffda\007\uffda\010\uffda\013\uffda\014\uffda\015" +
    "\uffda\023\uffda\024\uffda\025\uffda\030\uffda\031\uffda\032\uffda" +
    "\033\uffda\035\uffda\036\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\057\uffda\061\uffda\062\uffda\001\002\000\032" +
    "\005\072\007\076\014\065\015\063\023\064\032\062\033" +
    "\051\046\067\047\057\051\073\052\070\057\105\001\002" +
    "\000\042\006\122\011\206\017\125\020\124\021\127\022" +
    "\117\026\131\040\133\042\132\043\135\044\123\045\120" +
    "\052\115\053\121\054\126\055\116\001\002\000\060\005" +
    "\uffd9\007\uffd9\010\uffd9\013\uffd9\014\uffd9\015\uffd9\023\uffd9" +
    "\024\uffd9\025\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\035" +
    "\uffd9\036\uffd9\046\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9" +
    "\057\uffd9\061\uffd9\062\uffd9\001\002\000\032\005\072\007" +
    "\076\014\065\015\063\023\064\032\062\033\051\046\067" +
    "\047\057\051\073\052\070\057\105\001\002\000\042\006" +
    "\122\017\125\020\124\021\127\022\117\026\131\034\211" +
    "\040\133\042\132\043\135\044\123\045\120\052\115\053" +
    "\121\054\126\055\116\001\002\000\054\005\072\007\076" +
    "\010\054\013\023\014\065\015\063\023\064\024\052\025" +
    "\046\030\061\032\062\033\051\035\047\046\067\047\057" +
    "\050\016\051\073\052\070\057\074\061\021\062\066\001" +
    "\002\000\060\005\uffde\007\uffde\010\uffde\013\uffde\014\uffde" +
    "\015\uffde\023\uffde\024\uffde\025\uffde\030\uffde\031\uffde\032" +
    "\uffde\033\uffde\035\uffde\036\uffde\046\uffde\047\uffde\050\uffde" +
    "\051\uffde\052\uffde\057\uffde\061\uffde\062\uffde\001\002\000" +
    "\042\006\122\017\125\020\124\021\127\022\117\026\131" +
    "\034\214\040\133\042\132\043\135\044\123\045\120\052" +
    "\115\053\121\054\126\055\116\001\002\000\050\006\uffc5" +
    "\011\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5\026\uffc5\034" +
    "\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5" +
    "\045\uffc5\052\uffc5\053\uffc5\054\uffc5\055\uffc5\001\002\000" +
    "\056\005\072\007\076\010\054\013\023\014\065\015\063" +
    "\023\064\024\052\025\046\030\061\032\062\033\051\035" +
    "\047\036\216\046\067\047\057\050\016\051\073\052\070" +
    "\057\074\061\021\062\066\001\002\000\060\005\uffdb\007" +
    "\uffdb\010\uffdb\013\uffdb\014\uffdb\015\uffdb\023\uffdb\024\uffdb" +
    "\025\uffdb\030\uffdb\031\uffdb\032\uffdb\033\uffdb\035\uffdb\036" +
    "\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb\057\uffdb" +
    "\061\uffdb\062\uffdb\001\002\000\060\005\uffdc\007\uffdc\010" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\023\uffdc\024\uffdc\025\uffdc" +
    "\030\uffdc\031\uffdc\032\uffdc\033\uffdc\035\uffdc\036\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\057\uffdc\061\uffdc" +
    "\062\uffdc\001\002\000\032\005\072\007\076\014\065\015" +
    "\063\023\064\032\062\033\051\046\067\047\057\051\073" +
    "\052\070\057\105\001\002\000\042\006\122\011\222\017" +
    "\125\020\124\021\127\022\117\026\131\040\133\042\132" +
    "\043\135\044\123\045\120\052\115\053\121\054\126\055" +
    "\116\001\002\000\060\005\uffe4\007\uffe4\010\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\023\uffe4\024\uffe4\025\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\035\uffe4\036\uffe4\046\uffe4\047\uffe4" +
    "\050\uffe4\051\uffe4\052\uffe4\057\uffe4\061\uffe4\062\uffe4\001" +
    "\002\000\004\032\225\001\002\000\020\012\ufff1\013\ufff1" +
    "\016\ufff1\036\ufff1\050\ufff1\057\ufff1\061\ufff1\001\002\000" +
    "\006\011\ufff0\037\ufff0\001\002\000\004\033\227\001\002" +
    "\000\014\013\uffe7\034\uffe9\050\uffe7\057\uffe7\061\uffe7\001" +
    "\002\000\004\034\231\001\002\000\004\035\232\001\002" +
    "\000\056\005\uffe5\007\uffe5\010\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5\032\uffe5\033\uffe5" +
    "\035\uffe5\036\uffe5\046\uffe5\047\uffe5\050\uffe5\051\uffe5\052" +
    "\uffe5\057\uffe5\061\uffe5\062\uffe5\001\002\000\056\005\072" +
    "\007\076\010\054\013\023\014\065\015\063\023\064\024" +
    "\052\025\046\030\061\032\062\033\051\035\047\036\234" +
    "\046\067\047\057\050\016\051\073\052\070\057\074\061" +
    "\021\062\066\001\002\000\020\012\uffeb\013\uffeb\016\uffeb" +
    "\036\uffeb\050\uffeb\057\uffeb\061\uffeb\001\002\000\006\032" +
    "\246\040\031\001\002\000\004\032\237\001\002\000\004" +
    "\033\240\001\002\000\014\013\uffe7\034\uffe9\050\uffe7\057" +
    "\uffe7\061\uffe7\001\002\000\004\034\242\001\002\000\004" +
    "\035\243\001\002\000\056\005\uffe5\007\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\015\uffe5\023\uffe5\024\uffe5\025\uffe5\030\uffe5" +
    "\032\uffe5\033\uffe5\035\uffe5\036\uffe5\046\uffe5\047\uffe5\050" +
    "\uffe5\051\uffe5\052\uffe5\057\uffe5\061\uffe5\062\uffe5\001\002" +
    "\000\056\005\072\007\076\010\054\013\023\014\065\015" +
    "\063\023\064\024\052\025\046\030\061\032\062\033\051" +
    "\035\047\036\245\046\067\047\057\050\016\051\073\052" +
    "\070\057\074\061\021\062\066\001\002\000\020\012\uffed" +
    "\013\uffed\016\uffed\036\uffed\050\uffed\057\uffed\061\uffed\001" +
    "\002\000\004\033\247\001\002\000\014\013\uffe7\034\uffe9" +
    "\050\uffe7\057\uffe7\061\uffe7\001\002\000\004\034\251\001" +
    "\002\000\004\035\252\001\002\000\056\005\uffe5\007\uffe5" +
    "\010\uffe5\013\uffe5\014\uffe5\015\uffe5\023\uffe5\024\uffe5\025" +
    "\uffe5\030\uffe5\032\uffe5\033\uffe5\035\uffe5\036\uffe5\046\uffe5" +
    "\047\uffe5\050\uffe5\051\uffe5\052\uffe5\057\uffe5\061\uffe5\062" +
    "\uffe5\001\002\000\056\005\072\007\076\010\054\013\023" +
    "\014\065\015\063\023\064\024\052\025\046\030\061\032" +
    "\062\033\051\035\047\036\254\046\067\047\057\050\016" +
    "\051\073\052\070\057\074\061\021\062\066\001\002\000" +
    "\020\012\uffee\013\uffee\016\uffee\036\uffee\050\uffee\057\uffee" +
    "\061\uffee\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\253\000\006\003\003\004\004\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\006\013\001\001\000\012\007\026\010\014" +
    "\011\017\012\025\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\234\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\032\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\034\016\035\001\001" +
    "\000\002\001\001\000\004\012\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\043\001\001\000\026\012\052\020\076\021" +
    "\044\022\047\023\074\024\055\025\057\031\054\032\077" +
    "\033\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\214\001\001\000\004\030\127\001\001\000\022" +
    "\021\101\022\212\023\103\024\055\025\057\031\054\032" +
    "\077\033\070\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\021\101\022\176\023\103\024\055\025\057\031" +
    "\054\032\077\033\070\001\001\000\022\021\101\022\175" +
    "\023\103\024\055\025\057\031\054\032\077\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\035\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\153\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\021\101\022\102\023\103\024\055\025\057\031\054" +
    "\032\077\033\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\127\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\026" +
    "\111\027\110\001\001\000\022\021\101\022\113\023\103" +
    "\024\055\025\057\031\054\032\077\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\030\127\001\001" +
    "\000\022\021\101\022\151\023\103\024\055\025\057\031" +
    "\054\032\077\033\070\001\001\000\022\021\101\022\150" +
    "\023\103\024\055\025\057\031\054\032\077\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\101" +
    "\022\147\023\103\024\055\025\057\031\054\032\077\033" +
    "\070\001\001\000\022\021\101\022\146\023\103\024\055" +
    "\025\057\031\054\032\077\033\070\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\101" +
    "\022\145\023\103\024\055\025\057\031\054\032\077\033" +
    "\070\001\001\000\002\001\001\000\022\021\101\022\144" +
    "\023\103\024\055\025\057\031\054\032\077\033\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\022\021\101" +
    "\022\135\023\103\024\055\025\057\031\054\032\077\033" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\127\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\026\142\027\110\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\127\001\001\000" +
    "\004\030\127\001\001\000\004\030\127\001\001\000\004" +
    "\030\127\001\001\000\004\030\127\001\001\000\004\030" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\021" +
    "\101\022\160\023\103\024\055\025\057\031\054\032\077" +
    "\033\070\001\001\000\004\030\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\164\027\110\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\012\052\020" +
    "\172\021\044\022\047\023\074\024\055\025\057\031\054" +
    "\032\077\033\070\001\001\000\022\021\101\022\170\023" +
    "\103\024\055\025\057\031\054\032\077\033\070\001\001" +
    "\000\004\030\127\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\012\052\020\174\021\044\022\047\023\074" +
    "\024\055\025\057\031\054\032\077\033\070\001\001\000" +
    "\002\001\001\000\004\030\127\001\001\000\004\030\127" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\021\101\022\204\023\103" +
    "\024\055\025\057\031\054\032\077\033\070\001\001\000" +
    "\004\030\127\001\001\000\002\001\001\000\022\021\101" +
    "\022\207\023\103\024\055\025\057\031\054\032\077\033" +
    "\070\001\001\000\004\030\127\001\001\000\026\012\052" +
    "\020\211\021\044\022\047\023\074\024\055\025\057\031" +
    "\054\032\077\033\070\001\001\000\002\001\001\000\004" +
    "\030\127\001\001\000\002\001\001\000\026\012\052\020" +
    "\076\021\044\022\047\023\074\024\055\025\057\031\054" +
    "\032\077\033\070\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\021\101\022\220\023\103\024\055\025\057" +
    "\031\054\032\077\033\070\001\001\000\004\030\127\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\015\227\016" +
    "\035\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\232\001\001\000\026\012\052\020\076\021\044\022" +
    "\047\023\074\024\055\025\057\031\054\032\077\033\070" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\240\016\035\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\243\001" +
    "\001\000\026\012\052\020\076\021\044\022\047\023\074" +
    "\024\055\025\057\031\054\032\077\033\070\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\015\247\016\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\252\001\001\000\026\012\052\020\076\021\044\022\047" +
    "\023\074\024\055\025\057\031\054\032\077\033\070\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

	Token t = lexer.next_token();
	if (printTokens)
		t.printToken();
	return t; 

    }


	/** Causes the parsr to print every token it reads.
	 * This is useful for debugging.
	 */
	public static boolean printTokens = false;
	
	private Lexer lexer;

	public Parser(Lexer lexer) {
		super(lexer);
		this.lexer = lexer;
	}
	
	public int getLine() {
		return lexer.getLineNumber();
	}
	
	public void syntax_error(Symbol s) throws SyntaxError{
        Token tok = (Token) s;
        throw new SyntaxError(tok);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // literal ::= NULL 
            {
              Object[] RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				Object[] ltrl = new Object[2];
				ltrl[0] = (Object)LiteralTypes.NULL;
				ltrl[1] = (Object)tok;
				RESULT = ltrl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // literal ::= FALSE 
            {
              Object[] RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				Object[] ltrl = new Object[2];
				ltrl[0] = (Object)LiteralTypes.FALSE;
				ltrl[1] = (Object)tok;
				RESULT = ltrl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // literal ::= TRUE 
            {
              Object[] RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				Object[] ltrl = new Object[2];
				ltrl[0] = (Object)LiteralTypes.TRUE;
				ltrl[1] = (Object)tok;
				RESULT = ltrl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // literal ::= QUOTE 
            {
              Object[] RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				Object[] ltrl = new Object[2];
				ltrl[0] = (Object)LiteralTypes.STRING;
				ltrl[1] = (Object)tok;
				RESULT = ltrl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // literal ::= INTEGER 
            {
              Object[] RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 
				Object[] ltrl = new Object[2];
				ltrl[0] = (Object)LiteralTypes.INTEGER;
				ltrl[1] = (Object)tok;
				RESULT = ltrl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(25/*literal*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // lunop ::= LNEG 
            {
              UnaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = UnaryOps.LNEG; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(23/*lunop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // munop ::= MINUS 
            {
              UnaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = UnaryOps.UMINUS; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(24/*munop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // lbinop ::= EQUAL 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.EQUAL; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // lbinop ::= NEQUAL 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.NEQUAL; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // lbinop ::= LTE 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.LTE; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // lbinop ::= LT 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.LT; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // lbinop ::= GTE 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.GTE; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // lbinop ::= GT 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.GT; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // lbinop ::= LOR 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.LOR; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lbinop ::= LAND 
            {
              BinaryOps RESULT = null;
		int tokleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int tokright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object tok = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = BinaryOps.LAND; 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(22/*lbinop*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // virtualCall ::= ID LP commaexprorepislon RP 
            {
              VirtualCall RESULT = null;
		int metleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> plist = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new VirtualCall(metleft, met, plist); 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*virtualCall*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // virtualCall ::= expr DOT ID LP commaexprorepislon RP 
            {
              VirtualCall RESULT = null;
		int exleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression ex = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int metleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int metright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String met = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int plistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int plistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> plist = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new VirtualCall(exleft, ex, met, plist); 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(18/*virtualCall*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // commaexprfactory ::= 
            {
              LinkedList<Expression> RESULT = null;
		
				RESULT = new LinkedList<Expression>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*commaexprfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // commaexprfactory ::= commaexprfactory expr COMMA 
            {
              LinkedList<Expression> RESULT = null;
		int cefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Expression> cef = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
 				cef.add(exp);
 				RESULT = cef;
 			
              CUP$Parser$result = new java_cup.runtime.Symbol(21/*commaexprfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // commaexprorepislon ::= 
            {
              LinkedList<Expression> RESULT = null;
		
				RESULT = new LinkedList<Expression>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*commaexprorepislon*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // commaexprorepislon ::= commaexprfactory expr 
            {
              LinkedList<Expression> RESULT = null;
		int cefleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cefright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> cef = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				cef.add(exp);
				RESULT = cef;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(20/*commaexprorepislon*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // staticCall ::= CLASS_ID DOT ID LP commaexprorepislon RP 
            {
              StaticCall RESULT = null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int explistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int explistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Expression> explist = (LinkedList<Expression>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new StaticCall(idleft, cid,id, explist); 
			
              CUP$Parser$result = new java_cup.runtime.Symbol(19/*staticCall*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // call ::= virtualCall 
            {
              Call RESULT = null;
		int vcleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int vcright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		VirtualCall vc = (VirtualCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = vc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // call ::= staticCall 
            {
              Call RESULT = null;
		int scleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int scright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		StaticCall sc = (StaticCall)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = sc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(17/*call*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr ::= LP expr RP 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new ExpressionBlock(exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr ::= literal 
            {
              Expression RESULT = null;
		int ltrlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int ltrlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object[] ltrl = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new Literal(ltrlleft,(LiteralTypes)ltrl[0],ltrl[1]);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expr ::= lunop expr 
            {
              Expression RESULT = null;
		int unpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int unpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnaryOps unp = (UnaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new LogicalUnaryOp(unp,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expr ::= munop expr 
            {
              Expression RESULT = null;
		int unpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int unpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		UnaryOps unp = (UnaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathUnaryOp(unp,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expr ::= expr MOD expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathBinaryOp(exp1,BinaryOps.MOD,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expr ::= expr DIVIDE expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathBinaryOp(exp1,BinaryOps.DIVIDE,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expr ::= expr MULTIPLY expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathBinaryOp(exp1,BinaryOps.MULTIPLY,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expr ::= expr MINUS expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathBinaryOp(exp1,BinaryOps.MINUS,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expr ::= expr PLUS expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new MathBinaryOp(exp1,BinaryOps.PLUS,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expr ::= expr lbinop expr 
            {
              Expression RESULT = null;
		int exp1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int exp1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		BinaryOps op = (BinaryOps)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int exp2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int exp2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Expression exp2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new LogicalBinaryOp(exp1,op,exp2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expr ::= expr DOT LENGTH 
            {
              Expression RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
				RESULT = new Length(arr);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expr ::= NEW CLASS_ID LP RP 
            {
              Expression RESULT = null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
			 	RESULT = new NewClass(cidleft, cid);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expr ::= THIS 
            {
              Expression RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
			 	RESULT = new This(leftleft);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expr ::= call 
            {
              Expression RESULT = null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Call cll = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
			 	RESULT = cll;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expr ::= NEW type LB expr RB 
            {
              Expression RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			 	RESULT = new NewArray(t,e);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expr ::= location 
            {
              Expression RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = loc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(16/*expr*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // location ::= expr LB expr RB 
            {
              Location RESULT = null;
		int arrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int arrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression arr = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new ArrayLocation(arr,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*location*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // location ::= expr DOT ID 
            {
              Location RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
			
				RESULT = new VariableLocation(nameleft,exp,name);
				
			
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*location*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // location ::= ID 
            {
              Location RESULT = null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
			
				RESULT = new VariableLocation(nameleft,name);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(15/*location*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lpexprrp ::= LP expr RP 
            {
              Expression RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = exp;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(27/*lpexprrp*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // stmt ::= type ID ASSIGN expr SEMI 
            {
              Statement RESULT = null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new LocalVariable(tp,id,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // stmt ::= type ID SEMI 
            {
              Statement RESULT = null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new LocalVariable(tp,id);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // stmt ::= LCBR stmtwrapper RCBR 
            {
              Statement RESULT = null;
		int lcbrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int lcbrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object lcbr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmtlistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtlistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmtlist = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new StatementsBlock(lcbrleft,stmtlist);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stmt ::= CONTINUE SEMI 
            {
              Statement RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Continue(leftleft);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stmt ::= BREAK SEMI 
            {
              Statement RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Break(leftleft);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stmt ::= WHILE LP expr RP stmt 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new While(cond,stm);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // stmt ::= IF lpexprrp stmt ELSE stmt 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int stm1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int stm1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Statement stm1 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int stm2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stm2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement stm2 = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new If(cond,stm1,stm2);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // stmt ::= IF lpexprrp stmt 
            {
              Statement RESULT = null;
		int condleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression cond = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new If(cond,stm);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // stmt ::= RETURN expr SEMI 
            {
              Statement RESULT = null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Return(expleft,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // stmt ::= RETURN SEMI 
            {
              Statement RESULT = null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object left = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Return(leftleft);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // stmt ::= call SEMI 
            {
              Statement RESULT = null;
		int cllleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cllright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Call cll = (Call)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new CallStatement(cll);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // stmt ::= location ASSIGN expr SEMI 
            {
              Statement RESULT = null;
		int locleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Location loc = (Location)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new Assignment(loc,exp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(14/*stmt*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // stmtwrapper ::= 
            {
              LinkedList<Statement> RESULT = null;
		 
				RESULT = new LinkedList<Statement>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*stmtwrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // stmtwrapper ::= stmtwrapper stmt 
            {
              LinkedList<Statement> RESULT = null;
		int wrapleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int wrapright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> wrap = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int stmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int stmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Statement stm = (Statement)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
 				wrap.add(stm);
 				RESULT = wrap;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(13/*stmtwrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // formalsfactory ::= 
            {
              LinkedList<Formal> RESULT = null;
		
				RESULT = new LinkedList<Formal>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*formalsfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // formalsfactory ::= formalsfactory type ID COMMA 
            {
              LinkedList<Formal> RESULT = null;
		int fctryleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fctryright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<Formal> fctry = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				fctry.add(new Formal(tp,id));
				RESULT = fctry;
		   
              CUP$Parser$result = new java_cup.runtime.Symbol(12/*formalsfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // formals ::= 
            {
              LinkedList<Formal> RESULT = null;
		
				RESULT = new LinkedList<Formal>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*formals*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // formals ::= formalsfactory type ID 
            {
              LinkedList<Formal> RESULT = null;
		int fctryleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int fctryright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Formal> fctry = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				fctry.add(new Formal(tp,id));
				RESULT = fctry;
		   
              CUP$Parser$result = new java_cup.runtime.Symbol(11/*formals*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // method ::= VOID ID LP formals RP LCBR stmtwrapper RCBR 
            {
              Method RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Formal> frml = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtwrpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtwrpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmtwrp = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new VirtualMethod(new PrimitiveType(idleft,DataTypes.VOID), id,frml,stmtwrp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // method ::= type ID LP formals RP LCBR stmtwrapper RCBR 
            {
              Method RESULT = null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Formal> frml = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtwrpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtwrpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmtwrp = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new VirtualMethod(tp, id,frml,stmtwrp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // method ::= STATIC VOID ID LP formals RP LCBR stmtwrapper RCBR 
            {
              Method RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Formal> frml = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtwrpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtwrpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmtwrp = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new StaticMethod(new PrimitiveType(idleft,DataTypes.VOID), id,frml,stmtwrp);
			 
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // method ::= STATIC type ID LP formals RP LCBR stmtwrapper RCBR 
            {
              Method RESULT = null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int frmlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int frmlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<Formal> frml = (LinkedList<Formal>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int stmtwrpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int stmtwrpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Statement> stmtwrp = (LinkedList<Statement>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				RESULT = new StaticMethod(tp, id,frml,stmtwrp);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*method*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // idfactory ::= 
            {
              ArrayList<String> RESULT = null;
		
				RESULT = new ArrayList<String>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*idfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // idfactory ::= idfactory COMMA ID 
            {
              ArrayList<String> RESULT = null;
		int idfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<String> idf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				idf.add(id);
				RESULT = idf;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(10/*idfactory*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // field ::= type ID idfactory SEMI 
            {
              LinkedList<Field> RESULT = null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Type tp = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int idfleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idfright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<String> idf = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
			LinkedList<Field> b = new LinkedList<Field>();
	    	for (int i=0;i<idf.size();i++)
	    		b.add(new Field(tp,idf.get(i)));
	    	b.add(new Field(tp,id));
	    	RESULT = b;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*field*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bracket ::= LB RB 
            {
              Object RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(26/*bracket*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= type LB RB 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = t; t.incrementDimension(); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= CLASS_ID 
            {
              Type RESULT = null;
		int cidleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int cidright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String cid = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		 RESULT =new UserType(cidleft,cid); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // type ::= STRING 
            {
              Type RESULT = null;
		 RESULT = new PrimitiveType(this.parser.getLine(), DataTypes.STRING); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // type ::= INT 
            {
              Type RESULT = null;
		 RESULT = new PrimitiveType(this.parser.getLine(), DataTypes.INT); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // type ::= BOOLEAN 
            {
              Type RESULT = null;
		 RESULT = new PrimitiveType(this.parser.getLine(), DataTypes.BOOLEAN); 
              CUP$Parser$result = new java_cup.runtime.Symbol(8/*type*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // fieldormethod ::= method 
            {
              ArrayList<Object> RESULT = null;
		int mthdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int mthdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Method mthd = (Method)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				ArrayList<Object> acc = new ArrayList<Object>();
				Integer x = 0;
				acc.add(x);
				acc.add(mthd);
				RESULT = acc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*fieldormethod*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // fieldormethod ::= field 
            {
              ArrayList<Object> RESULT = null;
		int fldleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fldright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		LinkedList<Field> fld = (LinkedList<Field>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				ArrayList<Object> acc = new ArrayList<Object>();
				Integer x = 1;
				acc.add(x);
				acc.add(fld);
				RESULT = acc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*fieldormethod*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // fieldormethodwrapper ::= 
            {
              ArrayList<Object> RESULT = null;
		
				ArrayList<Object> acc = new ArrayList<Object>();
				acc.add(new LinkedList<Method>());
				acc.add(new LinkedList<Field>());
				RESULT = acc;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*fieldormethodwrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // fieldormethodwrapper ::= fieldormethodwrapper fieldormethod 
            {
              ArrayList<Object> RESULT = null;
		int fmwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Object> fmw = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int fmleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int fmright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		ArrayList<Object> fm = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				int x = (Integer)fm.get(0);
				if (x ==0){
					((LinkedList<Method>)fmw.get(0)).add((Method)fm.get(1));
				}
				else{
					((LinkedList<Field>)fmw.get(1)).addAll( (LinkedList<Field>)fm.get(1));
				}
				RESULT = fmw;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*fieldormethodwrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // extendswrapper ::= 
            {
              String RESULT = null;
		
				RESULT = null;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*extendswrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // extendswrapper ::= EXTENDS CLASS_ID 
            {
              String RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = id;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*extendswrapper*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // classDecl ::= 
            {
              LinkedList<ICClass> RESULT = null;
		
				RESULT = new LinkedList<ICClass>();
			
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*classDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // classDecl ::= classDecl CLASS CLASS_ID extendswrapper LCBR fieldormethodwrapper RCBR 
            {
              LinkedList<ICClass> RESULT = null;
		int cdlleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cdlright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<ICClass> cdl = (LinkedList<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int extleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int extright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String ext = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int fmwleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int fmwright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Object> fmw = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
				if (ext != null)
					cdl.add(new ICClass(idleft,id, ext, (LinkedList<Field>)fmw.get(1), (LinkedList<Method>)fmw.get(0)));
				else
					cdl.add(new ICClass(idleft,id, (LinkedList<Field>)fmw.get(1), (LinkedList<Method>)fmw.get(0)));
				RESULT = cdl;
			
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*classDecl*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Program start_val = (Program)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // program ::= classDecl 
            {
              Program RESULT = null;
		int clleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int clright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		LinkedList<ICClass> cl = (LinkedList<ICClass>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
				RESULT = new Program(cl);
			
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*program*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

