package IC.Parser;

public class LexicalError extends Exception
{
	public static final int LEXER_MESSAGE = 1;
	public static final int LARGE_NUMBER = 2;
	public static final int SEQUENTIAL_ZEROS = 3;
	public static final int ILLEGAL_ID = 4;
	public static final int UNFINISHED_COMMENT = 5;
	public static final int UNFINISHED_STRING = 6;
	public static final int ILLEGAL_QUOTE = 7;
	public static final int ILLEGAL_CHAR = 8;
	public static final int GENERAL_ERROR = 9;	
	
	private static final long serialVersionUID = 1L;
	
	public int type = 0;
	private String str = "";
	private int line = -1;	
	
	
	/**
	 * @param message - A general error message generated by Lexer.java.
	 * This is a constructor to the object, which recieves a 
	 * message generated by Lexer.java.
	 */
	public LexicalError(String message) {
		this.str = message;
		this.type = LEXER_MESSAGE; 
		
	}
	/**
	 * @overload 
	 * @param String token_to_string - String recieved while constructing this object.
	 * @param int type_param - The LexicalError type
	 * @param int line_param = The line in the file that the error occoured.
	 * Our lexical exception will output the line (and token) 
	 * on which the error has occured.
	 */
	public LexicalError(String token_to_string, int type_param, int line_param) {
		this.str = token_to_string;
		this.type = type_param;
		this.line = line_param;
    }
	
	/**
	 * This function returns the message that this exception object contains.
	 */
	public String toString(){
		switch (this.type){
			case ILLEGAL_CHAR:
				return ("Lexical error: illegal character '" + this.str + "'" + " in line: " + this.line);
			case LEXER_MESSAGE:
				return this.str;
			case UNFINISHED_STRING:
				return ("Lexical error: Unterminated string at line: " + this.line);
			case ILLEGAL_QUOTE:
				return ("Lexical error: Illegal escape characters in string at line: " + this.line);
			case UNFINISHED_COMMENT:
				return ("Lexical error: Unterminated block comment");
			case ILLEGAL_ID:
				return ("Lexical error: Illegal identifier: " + "'" + this.str+ "'" + 
						" in line: "+ this.line);
			case SEQUENTIAL_ZEROS:
				return ("Lexical error: Sequential zeros number: " + "'" + this.str+ "'" + 
						" in line: "+ this.line);	
			case LARGE_NUMBER:
				return ("Lexical error: Numbers cannot be larger then 2^32 - 1. You entered: " + this.str
						+ " in line: " + this.line);
			case GENERAL_ERROR:
				return ("Lexical error: Unknown error at line " + this.line);
			default:
				return ("Lexical error: Unhandled error. " + this.type);
				
		}
	}
		
}
