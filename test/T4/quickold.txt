
######################
# Program ~quick.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative array size allocation. Program will no exit. "
null_reference: "Null reference. Program will no exit. "
illegal_arr_loc: "Illegal array location. Program will no exit. "
dev_by_zero: "Devision by zero. Program will no exit. "

######################

######################
# DISPATCH VECTORS
_DV_Quicksort: [_Quicksort_partition]
######################

_Quicksort_partition:   # Method partition:
# Line 19: 
Move a_Quicksort_17, R1
Move low, R2
MoveArray R1[R2], R3
Move R3, pivot_Quicksort_17
# Line 20: 
Move low, R4
Move R4, i_Quicksort_17
# Line 21: 
Move high, R5
Move R5, j_Quicksort_17
# Line 22: 
# Line 24: 
_l1:   # While
Move 1, R6
Compare 0,R6		# While condition check
JumpLE _l2		# Conditional jump when while statement is false
# Line 24: 
_l3:   # While
Move a_Quicksort_18, R7
Move i_Quicksort_18, R8
MoveArray R7[R8], R9
Move pivot_Quicksort_18, R10
Move 0, R11
Compare R10,R9
JumpGE _l5
Move 1, R11
_l5:
Compare 0,R11		# While condition check
JumpLE _l4		# Conditional jump when while statement is false
Move i_Quicksort_18, R13
Move 1, R14
Add R14,R13
Move R13, i_Quicksort_18 # assigning val to loc
_l4:   # False while condition
_l6:   # While
Move a_Quicksort_18, R15
Move j_Quicksort_18, R16
MoveArray R15[R16], R17
Move pivot_Quicksort_18, R18
Move 0, R19
Compare R18,R17
JumpLE _l8
Move 1, R19
_l8:
Compare 0,R19		# While condition check
JumpLE _l7		# Conditional jump when while statement is false
Move j_Quicksort_18, R21
Move 1, R22
Sub R22,R21
Move R21, j_Quicksort_18 # assigning val to loc
_l7:   # False while condition
Move i_Quicksort_18, R23
Move j_Quicksort_18, R24
Move 0, R25
Compare R24,R23
JumpL _l12
Move 1, R25
_l12:
Compare 0,R25		# If's condition check
JumpTrue _l10		# Conditional jump when If's outcome is true
_l9:   # If's then label
Jump _l2		# Break statement. Jump to end of while statement label: _l2
Jump _l11		# Jump to end label(end of then part)
_l10:   # If's else label
_l11:   # End of If statement
Move a_Quicksort_18, R27
Move i_Quicksort_18, R28
MoveArray R27[R28], R29
Move R29, tmp_Quicksort_18 # assigning val to loc
Move a_Quicksort_18, R30
Move i_Quicksort_18, R31
Move a_Quicksort_18, R33
Move j_Quicksort_18, R34
MoveArray R33[R34], R35
MoveArray R35, R30[R31] # assigning val to loc
Move a_Quicksort_18, R36
Move j_Quicksort_18, R37
Move tmp_Quicksort_18, R39
MoveArray R39, R36[R37] # assigning val to loc
Move i_Quicksort_18, R41
Move 1, R42
Add R42,R41
Move R41, i_Quicksort_18 # assigning val to loc
Move j_Quicksort_18, R44
Move 1, R45
Sub R45,R44
Move R44, j_Quicksort_18 # assigning val to loc
_l2:   # False while condition
# Line 37: 
Move j_Quicksort_17, R46
Move R46, R47
Return R47
Return 9999



_ic_main:   # Main Method
# Line 40: 
# Line 43: 
Move 200, R49
Move R49, n_Quicksort_19 # assigning val to loc
# Line 44: 
Library __allocateObject(8),R50 # Allocation of Quicksort
MoveField _DV_Quicksort,R50.0 # Move field for DV pointer
Move R50, s_Quicksort_19
# Line 45: 
Move s_Quicksort_19, R51
Move n_Quicksort_19, R52
Move 4, R53
Mul R53,R52
Library __allocateArray(R52),R54
MoveField R54,R51.0 # (Assignment statement)
MoveField R54,R51.0 # assigning val to loc
# Line 47: 
Move 3, R56
Move 3, R57
Move s_Quicksort_19, R58
VirtualCall R58.0(low=R56,high=R57),R58
Library __exit(0),Rdummy
# Method main end
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

