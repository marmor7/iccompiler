
######################
# Program workspace/IC_COMPILER/test/T4/CurrentTest/Quicksort.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative or zero array size allocation. Program will no exit. "
null_reference: "Null reference. Program will no exit. "
illegal_arr_loc: "Illegal array location. Program will no exit. "
dev_by_zero: "Devision by zero. Program will no exit. "
str0: "Array elements: "
str1: " "
str2: "\n"
str3: "Invalid array length"
str4: ""
######################

######################
# DISPATCH VECTORS
_DV_Quicksort: [_Quicksort_partition,_Quicksort_quicksort,_Quicksort_initArray,_Quicksort_printArray]
######################

_Quicksort_partition:   # Method partition:
# Line 31: 
Move this, R1
Compare 0,R1
JumpTrue _null_reference
MoveField R1.1,R2
Move low, R3
Move 0, R6
ArrayLength R2,R5
Compare R3,R5
JumpL _illegal_arr_loc
Compare R3,R6
JumpG _illegal_arr_loc
MoveArray R2[R3], R4
Move R4, pivot_Quicksort_17
# Line 33: 
Move low, R7
Move R7, i_Quicksort_17
# Line 35: 
Move high, R8
Move R8, j_Quicksort_17
# Line 37: 
# Line 39: 
_l1:   # While
Move 1, R9
Compare 0,R9		# While condition check
JumpTrue _l2		# Conditional jump when while statement is false
# Line 39: 
_l3:   # While
Move this, R10
Compare 0,R10
JumpTrue _null_reference
MoveField R10.1,R11
Move i_Quicksort_17, R12
Move 0, R15
ArrayLength R11,R14
Compare R12,R14
JumpL _illegal_arr_loc
Compare R12,R15
JumpG _illegal_arr_loc
MoveArray R11[R12], R13
Move pivot_Quicksort_17, R16
Move 0, R17
Compare R16,R13
JumpGE _l5
Move 1, R17
_l5:
Compare 0,R17		# While condition check
JumpTrue _l4		# Conditional jump when while statement is false
Move i_Quicksort_17, R19
Move 1, R20
Add R20,R19
Move R19, i_Quicksort_17 # assigning val to loc
Jump _l3
_l4:   # False while condition
_l6:   # While
Move this, R21
Compare 0,R21
JumpTrue _null_reference
MoveField R21.1,R22
Move j_Quicksort_17, R23
Move 0, R26
ArrayLength R22,R25
Compare R23,R25
JumpL _illegal_arr_loc
Compare R23,R26
JumpG _illegal_arr_loc
MoveArray R22[R23], R24
Move pivot_Quicksort_17, R27
Move 0, R28
Compare R27,R24
JumpLE _l8
Move 1, R28
_l8:
Compare 0,R28		# While condition check
JumpTrue _l7		# Conditional jump when while statement is false
Move j_Quicksort_17, R30
Move 1, R31
Sub R31,R30
Move R30, j_Quicksort_17 # assigning val to loc
Jump _l6
_l7:   # False while condition
Move i_Quicksort_17, R32
Move j_Quicksort_17, R33
Move 0, R34
Compare R33,R32
JumpL _l12
Move 1, R34
_l12:
Compare 0,R34		# If's condition check
JumpTrue _l10		# Conditional jump when If's outcome is true
_l9:   # If's then label
Jump _l2		# Break statement. Jump to end of while statement label: _l2
Jump _l11		# Jump to end label(end of then part)
_l10:   # If's else label
_l11:   # End of If statement
Move this, R36
Compare 0,R36
JumpTrue _null_reference
MoveField R36.1,R37
Move i_Quicksort_17, R38
Move 0, R41
ArrayLength R37,R40
Compare R38,R40
JumpL _illegal_arr_loc
Compare R38,R41
JumpG _illegal_arr_loc
MoveArray R37[R38], R39
Move R39, tmp_Quicksort_17 # assigning val to loc
Move this, R42
Compare 0,R42
JumpTrue _null_reference
MoveField R42.1,R43
Move 0, R47
ArrayLength R43,R46
Compare i_Quicksort_17,R46
JumpL _illegal_arr_loc
Compare i_Quicksort_17,R47
JumpG _illegal_arr_loc
MoveArray R43[i_Quicksort_17], R45
Move this, R48
Compare 0,R48
JumpTrue _null_reference
MoveField R48.1,R49
Move j_Quicksort_17, R50
Move 0, R53
ArrayLength R49,R52
Compare R50,R52
JumpL _illegal_arr_loc
Compare R50,R53
JumpG _illegal_arr_loc
MoveArray R49[R50], R51
MoveArray R51, R43[i_Quicksort_17] # assigning val to loc
Move this, R54
Compare 0,R54
JumpTrue _null_reference
MoveField R54.1,R55
Move 0, R59
ArrayLength R55,R58
Compare j_Quicksort_17,R58
JumpL _illegal_arr_loc
Compare j_Quicksort_17,R59
JumpG _illegal_arr_loc
MoveArray R55[j_Quicksort_17], R57
Move tmp_Quicksort_17, R60
MoveArray R60, R55[j_Quicksort_17] # assigning val to loc
Move i_Quicksort_17, R62
Move 1, R63
Add R63,R62
Move R62, i_Quicksort_17 # assigning val to loc
Move j_Quicksort_17, R65
Move 1, R66
Sub R66,R65
Move R65, j_Quicksort_17 # assigning val to loc
Jump _l1
_l2:   # False while condition
# Line 59: 
Move j_Quicksort_17, R67
Move R67, R68
Return R68
Return 9999
_Quicksort_quicksort:   # Method quicksort:
# Line 65: 
Move low, R69
Move high, R70
Move 0, R71
Compare R70,R69
JumpGE _l16
Move 1, R71
_l16:
Compare 0,R71		# If's condition check
JumpTrue _l14		# Conditional jump when If's outcome is true
_l13:   # If's then label
# Line 65: 
Move low, R73
Move high, R74
Move this, R72
VirtualCall R72.0(low=R73,high=R74),R72
Move R72, mid_Quicksort_20
Move low, R76
Move mid_Quicksort_20, R77
Move this, R75
VirtualCall R75.1(low=R76,high=R77),R75
Move mid_Quicksort_20, R79
Move 1, R80
Add R80,R79
Move high, R81
Move this, R78
VirtualCall R78.1(low=R79,high=R81),R78
Jump _l15		# Jump to end label(end of then part)
_l14:   # If's else label
_l15:   # End of If statement
Return 9999
_Quicksort_initArray:   # Method initArray:
# Line 79: 
Move 0, R82
Move R82, i_Quicksort_21
# Line 81: 
_l17:   # While
Move i_Quicksort_21, R83
Move this, R84
Compare 0,R84
JumpTrue _null_reference
MoveField R84.1,R85
ArrayLength R85, R86
Move 0, R87
Compare R86,R83
JumpGE _l19
Move 1, R87
_l19:
Compare 0,R87		# While condition check
JumpTrue _l18		# Conditional jump when while statement is false
# Line 81: 
Move this, R88
Compare 0,R88
JumpTrue _null_reference
MoveField R88.1,R89
Move 0, R93
ArrayLength R89,R92
Compare i_Quicksort_21,R92
JumpL _illegal_arr_loc
Compare i_Quicksort_21,R93
JumpG _illegal_arr_loc
MoveArray R89[i_Quicksort_21], R91
Move this, R94
Compare 0,R94
JumpTrue _null_reference
MoveField R94.1,R95
ArrayLength R95, R96
Move i_Quicksort_21, R97
Sub R97,R96
MoveArray R96, R89[i_Quicksort_21] # assigning val to loc
Move i_Quicksort_21, R99
Move 1, R100
Add R100,R99
Move R99, i_Quicksort_21 # assigning val to loc
Jump _l17
_l18:   # False while condition
Return 9999
_Quicksort_printArray:   # Method printArray:
# Line 93: 
Move 0, R101
Move R101, i_Quicksort_23
# Line 95: 
Move str0, R102 # assigning literal to reg
Library __print(R102),R103
# Line 97: 
_l20:   # While
Move i_Quicksort_23, R104
Move this, R105
Compare 0,R105
JumpTrue _null_reference
MoveField R105.1,R106
ArrayLength R106, R107
Move 0, R108
Compare R107,R104
JumpGE _l22
Move 1, R108
_l22:
Compare 0,R108		# While condition check
JumpTrue _l21		# Conditional jump when while statement is false
# Line 97: 
Move this, R109
Compare 0,R109
JumpTrue _null_reference
MoveField R109.1,R110
Move i_Quicksort_23, R111
Move 0, R114
ArrayLength R110,R113
Compare R111,R113
JumpL _illegal_arr_loc
Compare R111,R114
JumpG _illegal_arr_loc
MoveArray R110[R111], R112
Library __printi(R112),R115
Move str1, R116 # assigning literal to reg
Library __print(R116),R117
Move i_Quicksort_23, R119
Move 1, R120
Add R120,R119
Move R119, i_Quicksort_23 # assigning val to loc
Jump _l20
_l21:   # False while condition
# Line 107: 
Move str2, R121 # assigning literal to reg
Library __print(R121),R122
Return 9999
_ic_main:   # Main Method
# Line 113: 
# Line 123: 
Move 200, R124
Move R124, n_Quicksort_25 # assigning val to loc
# Line 125: 
Move n_Quicksort_25, R125
Move 0, R126
Move 0, R127
Compare R126,R125
JumpG _l26
Move 1, R127
_l26:
Compare 0,R127		# If's condition check
JumpTrue _l24		# Conditional jump when If's outcome is true
_l23:   # If's then label
# Line 125: 
Move str3, R128 # assigning literal to reg
Library __println(R128),R129
Move 1, R130
Library __exit(R130),R131
Jump _l25		# Jump to end label(end of then part)
_l24:   # If's else label
_l25:   # End of If statement
# Line 133: 
Library __allocateObject(8),R132 # Allocation of Quicksort
MoveField _DV_Quicksort,R132.0 # Move field for DV pointer
Move R132, s_Quicksort_25
# Line 135: 
Move n_Quicksort_25, R134
Move 4, R135
Mul R135,R134
Compare 0,R134
JumpLE _arr_neg_alloc_size
Library __allocateArray(R134),R136
Move s_Quicksort_25, R137
Compare 0,R137
JumpTrue _null_reference
MoveField R136,R137.1 # assigning val to loc
# Line 137: 
Move s_Quicksort_25, R139
VirtualCall R139.2(),R139
# Line 139: 
Move s_Quicksort_25, R141
VirtualCall R141.3(),R141
# Line 139: 
Move str4, R142 # assigning literal to reg
Library __println(R142),R143
# Line 141: 
Move 0, R145
Move n_Quicksort_25, R146
Move 1, R147
Sub R147,R146
Move s_Quicksort_25, R148
VirtualCall R148.1(low=R145,high=R146),R148
# Line 143: 
Move s_Quicksort_25, R150
VirtualCall R150.3(),R150
Library __exit(0),Rdummy
# Method main end
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

