
######################
# Program ~recursion1.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative or zero array size allocation. Program will no exit. "
null_reference: "Null reference. Program will no exit. "
illegal_arr_loc: "Illegal array location. Program will no exit. "
dev_by_zero: "Devision by zero. Program will no exit. "

######################

######################
# DISPATCH VECTORS
_DV_A: [_A_fact]
######################

_A_fact:   # Method fact:
# Line 4: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
Move 1, R3
# new smartMove on: R1, R4
Move R1, R4 # brought to you by safe/smartmove
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
# new smartMove on: 0, R6
Move 0, R7 # brought to you by safe/smartmove
Move R7, R6 # brought to you by safe/smartmove
Compare R4,R5
JumpFalse _l4
# new smartMove on: 1, R6
Move 1, R8 # brought to you by safe/smartmove
Move R8, R6 # brought to you by safe/smartmove
_l4:
Compare 0,R6		# If's condition check
JumpTrue _l2		# Conditional jump when If's outcome is true
_l1:   # If's then label
# Line 4: 
Move 1, R9
# new smartMove on: R9, R10
Move R9, R10 # brought to you by safe/smartmove
Return R10
Jump _l3		# Jump to end label(end of then part)
_l2:   # If's else label
# Line 6: 
# new smartMove on: n, R1
Move n, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, n # reversed
# new smartMove on: n, R4
Move n, R5 # brought to you by safe/smartmove
Move R5, R4 # brought to you by safe/smartmove
Move R5, n # reversed
Move 1, R6
# new smartMove on: R4, R7
Move R4, R7 # brought to you by safe/smartmove
# new smartMove on: R6, R8
Move R6, R8 # brought to you by safe/smartmove
Sub R8,R7
# new smartMove on: this, R3
Move this, R9 # brought to you by safe/smartmove
Move R9, R3 # brought to you by safe/smartmove
Move R9, this # reversed
VirtualCall R3.0(n=R7),R3
# new smartMove on: R1, R10
Move R1, R10 # brought to you by safe/smartmove
# new smartMove on: R3, R11
Move R3, R11 # brought to you by safe/smartmove
Mul R11,R10
# new smartMove on: R10, R12
Move R10, R12 # brought to you by safe/smartmove
Return R12
_l3:   # End of If statement
Return 9999
_ic_main:   # Main Method
# Line 12: 
Library __allocateObject(4),R1 # Allocation of A
MoveField _DV_A,R1.0 # Move field for DV pointer
# new smartMove on: R1, a_A_20
Move R1, a_A_20 # brought to you by safe/smartmove
# Line 13: 
Move 5, R2
# new smartMove on: a_A_20, R3
Move a_A_20, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, a_A_20 # reversed
VirtualCall R3.0(n=R2),R3
# new smartMove on: R3, x_A_20
Move R3, x_A_20 # brought to you by safe/smartmove
# Line 14: 
# new smartMove on: x_A_20, R1
Move x_A_20, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, x_A_20 # reversed
Library __printi(R1),R3
Library __exit(0),Rdummy
# Method main end
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

