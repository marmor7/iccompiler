
######################
# Program test_RunTimeChecks.ic
######################

######################
# STRING LITERALS
arr_neg_alloc_size: "Negative or zero array size allocation. Program will now exit. "
null_reference: "Null reference. Program will now exit. "
illegal_arr_loc: "Illegal array location. Program will now exit. "
dev_by_zero: "Devision by zero. Program will now exit. "
str0: "OK!"
######################

######################
# DISPATCH VECTORS
_DV_C: []
_DV_B: []
_DV_A: [_A_initStringField,_A_getIntField,_A_foo,_A_bar]
_DV_RunTimeChecks: []
######################

_ic_main:   # Main Method
# Line 5: 
Move 100, R1
# new smartMove on: 4, R2
Move 4, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Mul R2,R1
Compare 0,R1
JumpLE _arr_neg_alloc_size
Library __allocateArray(R1),R4
# new smartMove on: R4, arr1_RunTimeChecks_20
Move R4, arr1_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 6: 
Move 0, R1
# new smartMove on: R1, arr2_RunTimeChecks_20
Move R1, arr2_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 8: 
Move 0, R2
# new smartMove on: 0, R5
Move 0, R6 # brought to you by safe/smartmove
Move R6, R5 # brought to you by safe/smartmove
# new smartMove on: arr1_RunTimeChecks_20, R7
Move arr1_RunTimeChecks_20, R8 # brought to you by safe/smartmove
Move R8, R7 # brought to you by safe/smartmove
Move R8, arr1_RunTimeChecks_20 # reversed
ArrayLength R7,R4		# Getting array length
Compare R2,R4
JumpL _illegal_arr_loc
Compare R2,R5
JumpG _illegal_arr_loc
# new smartMove on: arr1_RunTimeChecks_20[R2], R3
Move arr1_RunTimeChecks_20, R10 # brought to you by safe/smartmove
MoveArray R10[R2], R9 # SMART MOVED BITCH - Array Style
Move R9, R3 # brought to you by safe/smartmove
MoveArray R9, R10[R2] # reversed
Move R10, arr1_RunTimeChecks_20 # reversed
Library __allocateObject(16),R11 # Allocation of A
MoveField _DV_A,R11.0 # Move field for DV pointer
# new smartMove on: R11, arr1_RunTimeChecks_20[R2]
Move arr1_RunTimeChecks_20, R13 # brought to you by safe/smartmove
MoveArray R13[R2], R12 # SMART MOVED BITCH - Array Style
Move R11, R12 # brought to you by safe/smartmove
MoveArray R12, R13[R2] # reversed
Move R13, arr1_RunTimeChecks_20 # reversed
# Line 9: 
Move 1, R2
# new smartMove on: 0, R5
Move 0, R6 # brought to you by safe/smartmove
Move R6, R5 # brought to you by safe/smartmove
# new smartMove on: arr1_RunTimeChecks_20, R7
Move arr1_RunTimeChecks_20, R8 # brought to you by safe/smartmove
Move R8, R7 # brought to you by safe/smartmove
Move R8, arr1_RunTimeChecks_20 # reversed
ArrayLength R7,R4		# Getting array length
Compare R2,R4
JumpL _illegal_arr_loc
Compare R2,R5
JumpG _illegal_arr_loc
# new smartMove on: arr1_RunTimeChecks_20[R2], R3
Move arr1_RunTimeChecks_20, R10 # brought to you by safe/smartmove
MoveArray R10[R2], R9 # SMART MOVED BITCH - Array Style
Move R9, R3 # brought to you by safe/smartmove
MoveArray R9, R10[R2] # reversed
Move R10, arr1_RunTimeChecks_20 # reversed
Library __allocateObject(16),R11 # Allocation of A
MoveField _DV_A,R11.0 # Move field for DV pointer
# new smartMove on: R11, arr1_RunTimeChecks_20[R2]
Move arr1_RunTimeChecks_20, R13 # brought to you by safe/smartmove
MoveArray R13[R2], R12 # SMART MOVED BITCH - Array Style
Move R11, R12 # brought to you by safe/smartmove
MoveArray R12, R13[R2] # reversed
Move R13, arr1_RunTimeChecks_20 # reversed
# Line 14: 
# new smartMove on: arr1_RunTimeChecks_20, R1
Move arr1_RunTimeChecks_20, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, arr1_RunTimeChecks_20 # reversed
# new smartMove on: R1, R3
Move R1, R3 # brought to you by safe/smartmove
ArrayLength R3, R3
# new smartMove on: R3, l1_RunTimeChecks_20
Move R3, l1_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 19: 
Move 1, R1
Neg R1
# new smartMove on: R1, n_RunTimeChecks_20
Move R1, n_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 23: 
Move 10, R2
# new smartMove on: 4, R3
Move 4, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Mul R3,R2
Compare 0,R2
JumpLE _arr_neg_alloc_size
Library __allocateArray(R2),R5
# new smartMove on: R5, arr2_RunTimeChecks_20
Move R5, arr2_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 28: 
Move 0, R1
# new smartMove on: R1, a_RunTimeChecks_20
Move R1, a_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 32: 
Library __allocateObject(16),R2 # Allocation of A
MoveField _DV_A,R2.0 # Move field for DV pointer
# new smartMove on: R2, a_RunTimeChecks_20
Move R2, a_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 33: 
Move 10, R1
# new smartMove on: a_RunTimeChecks_20, R3
Move a_RunTimeChecks_20, R4 # brought to you by safe/smartmove
Move R4, R3 # brought to you by safe/smartmove
Move R4, a_RunTimeChecks_20 # reversed
VirtualCall R3.1(),R3
# new smartMove on: R1, R5
Move R1, R5 # brought to you by safe/smartmove
# new smartMove on: R3, R6
Move R3, R6 # brought to you by safe/smartmove
Add R6,R5
# new smartMove on: R5, num_RunTimeChecks_20
Move R5, num_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 34: 
# new smartMove on: a_RunTimeChecks_20, R2
Move a_RunTimeChecks_20, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, a_RunTimeChecks_20 # reversed
VirtualCall R2.3(),R2
Move 2, R4
# new smartMove on: R2, R5
Move R2, R5 # brought to you by safe/smartmove
# new smartMove on: R4, R6
Move R4, R6 # brought to you by safe/smartmove
Mul R6,R5
# new smartMove on: R5, num2_RunTimeChecks_20
Move R5, num2_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 49: 
Move 5, R1
Move 1, R2
# new smartMove on: R1, R3
Move R1, R3 # brought to you by safe/smartmove
# new smartMove on: R2, R4
Move R2, R4 # brought to you by safe/smartmove
Compare 0,R4
JumpTrue _dev_by_zero
Div R4,R3
# new smartMove on: R3, z_RunTimeChecks_20
Move R3, z_RunTimeChecks_20 # brought to you by safe/smartmove
# Line 50: 
Move str0, R1 # assigning literal to reg
Library __println(R1),R2
Library __exit(0),Rdummy
# Method main end
Return 9999
_A_initStringField:   # Method initStringField:
# Line 64: 
Move this, R1
# new smartMove on: val, R2
Move val, R3 # brought to you by safe/smartmove
Move R3, R2 # brought to you by safe/smartmove
Move R3, val # reversed
# new smartMove on: R2, R1.1
Compare 0,R1
JumpTrue _null_reference
MoveField R1.1,R4 # SMART MOVED BITCH - field style
Move R2, R4 # brought to you by safe/smartmove
MoveField R4,R1.1 # reversed
Return 9999
_A_getIntField:   # Method getIntField:
# Line 69: 
Move this, R1
# new smartMove on: R1.2, R2
Compare 0,R1
JumpTrue _null_reference
MoveField R1.2,R3 # SMART MOVED BITCH - field style
Move R3, R2 # brought to you by safe/smartmove
MoveField R3,R1.2 # reversed
Return R2
Return 9999
_A_foo:   # Method foo:
# Line 73: 
Move this, R1
# new smartMove on: R1.1, R2
Compare 0,R1
JumpTrue _null_reference
MoveField R1.1,R3 # SMART MOVED BITCH - field style
Move R3, R2 # brought to you by safe/smartmove
MoveField R3,R1.1 # reversed
Return R2
Return 9999
_A_bar:   # Method bar:
# Line 77: 
# new smartMove on: this, R1
Move this, R2 # brought to you by safe/smartmove
Move R2, R1 # brought to you by safe/smartmove
Move R2, this # reversed
Compare 0,R1
JumpTrue _null_reference
# new smartMove on: R1.2, R3
Compare 0,R1
JumpTrue _null_reference
MoveField R1.2,R4 # SMART MOVED BITCH - field style
Move R4, R3 # brought to you by safe/smartmove
MoveField R4,R1.2 # reversed
# new smartMove on: R3, R5
Move R3, R5 # brought to you by safe/smartmove
Return R5
Return 9999

######################
# Error Labels
######################

_null_reference:
Library __println(null_reference),Rdummy
Library __exit(1),Rdummy

_illegal_arr_loc:
Library __println(illegal_arr_loc),Rdummy
Library __exit(1),Rdummy

_dev_by_zero:
Library __println(dev_by_zero),Rdummy
Library __exit(1),Rdummy

_arr_neg_alloc_size:
Library __println(arr_neg_alloc_size),Rdummy
Library __exit(1),Rdummy

